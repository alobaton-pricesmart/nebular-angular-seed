/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@name CookieOptionsArgs
 * \@description
 *
 * Object containing default options to pass when setting cookies.
 *
 * The object may have following properties:
 *
 * - **path** - {string} - The cookie will be available only for this path and its
 *   sub-paths. By default, this is the URL that appears in your `<base>` tag.
 * - **domain** - {string} - The cookie will be available only for this domain and
 *   its sub-domains. For security reasons the user agent will not accept the cookie
 *   if the current domain is not a sub-domain of this domain or equal to it.
 * - **expires** - {string|Date} - String of the form "Wdy, DD Mon YYYY HH:MM:SS GMT"
 *   or a Date object indicating the exact date/time this cookie will expire.
 * - **secure** - {boolean} - If `true`, then the cookie will only be available through a
 *   secured connection.
 * - **httpOnly** - {boolean} - If `true`, then the cookie will be set with the `HttpOnly`
 *   flag, and will only be accessible from the remote server. Helps to prevent against
 *   XSS attacks.
 * - **storeUnencoded** - {boolean} - If `true`, then the cookie value will not be encoded and
 *   will be stored as provided.
 * @record
 */
export function CookieOptions() { }
if (false) {
    /** @type {?|undefined} */
    CookieOptions.prototype.path;
    /** @type {?|undefined} */
    CookieOptions.prototype.domain;
    /** @type {?|undefined} */
    CookieOptions.prototype.expires;
    /** @type {?|undefined} */
    CookieOptions.prototype.secure;
    /** @type {?|undefined} */
    CookieOptions.prototype.httpOnly;
    /** @type {?|undefined} */
    CookieOptions.prototype.storeUnencoded;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLW9wdGlvbnMubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29va2llLyIsInNvdXJjZXMiOlsibGliL2Nvb2tpZS1vcHRpb25zLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEsbUNBT0M7OztJQU5DLDZCQUFjOztJQUNkLCtCQUFnQjs7SUFDaEIsZ0NBQXNCOztJQUN0QiwrQkFBaUI7O0lBQ2pCLGlDQUFtQjs7SUFDbkIsdUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbmFtZSBDb29raWVPcHRpb25zQXJnc1xuICogQGRlc2NyaXB0aW9uXG4gKlxuICogT2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdCBvcHRpb25zIHRvIHBhc3Mgd2hlbiBzZXR0aW5nIGNvb2tpZXMuXG4gKlxuICogVGhlIG9iamVjdCBtYXkgaGF2ZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtICoqcGF0aCoqIC0ge3N0cmluZ30gLSBUaGUgY29va2llIHdpbGwgYmUgYXZhaWxhYmxlIG9ubHkgZm9yIHRoaXMgcGF0aCBhbmQgaXRzXG4gKiAgIHN1Yi1wYXRocy4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgVVJMIHRoYXQgYXBwZWFycyBpbiB5b3VyIGA8YmFzZT5gIHRhZy5cbiAqIC0gKipkb21haW4qKiAtIHtzdHJpbmd9IC0gVGhlIGNvb2tpZSB3aWxsIGJlIGF2YWlsYWJsZSBvbmx5IGZvciB0aGlzIGRvbWFpbiBhbmRcbiAqICAgaXRzIHN1Yi1kb21haW5zLiBGb3Igc2VjdXJpdHkgcmVhc29ucyB0aGUgdXNlciBhZ2VudCB3aWxsIG5vdCBhY2NlcHQgdGhlIGNvb2tpZVxuICogICBpZiB0aGUgY3VycmVudCBkb21haW4gaXMgbm90IGEgc3ViLWRvbWFpbiBvZiB0aGlzIGRvbWFpbiBvciBlcXVhbCB0byBpdC5cbiAqIC0gKipleHBpcmVzKiogLSB7c3RyaW5nfERhdGV9IC0gU3RyaW5nIG9mIHRoZSBmb3JtIFwiV2R5LCBERCBNb24gWVlZWSBISDpNTTpTUyBHTVRcIlxuICogICBvciBhIERhdGUgb2JqZWN0IGluZGljYXRpbmcgdGhlIGV4YWN0IGRhdGUvdGltZSB0aGlzIGNvb2tpZSB3aWxsIGV4cGlyZS5cbiAqIC0gKipzZWN1cmUqKiAtIHtib29sZWFufSAtIElmIGB0cnVlYCwgdGhlbiB0aGUgY29va2llIHdpbGwgb25seSBiZSBhdmFpbGFibGUgdGhyb3VnaCBhXG4gKiAgIHNlY3VyZWQgY29ubmVjdGlvbi5cbiAqIC0gKipodHRwT25seSoqIC0ge2Jvb2xlYW59IC0gSWYgYHRydWVgLCB0aGVuIHRoZSBjb29raWUgd2lsbCBiZSBzZXQgd2l0aCB0aGUgYEh0dHBPbmx5YFxuICogICBmbGFnLCBhbmQgd2lsbCBvbmx5IGJlIGFjY2Vzc2libGUgZnJvbSB0aGUgcmVtb3RlIHNlcnZlci4gSGVscHMgdG8gcHJldmVudCBhZ2FpbnN0XG4gKiAgIFhTUyBhdHRhY2tzLlxuICogLSAqKnN0b3JlVW5lbmNvZGVkKiogLSB7Ym9vbGVhbn0gLSBJZiBgdHJ1ZWAsIHRoZW4gdGhlIGNvb2tpZSB2YWx1ZSB3aWxsIG5vdCBiZSBlbmNvZGVkIGFuZFxuICogICB3aWxsIGJlIHN0b3JlZCBhcyBwcm92aWRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb29raWVPcHRpb25zIHtcbiAgcGF0aD86IHN0cmluZztcbiAgZG9tYWluPzogc3RyaW5nO1xuICBleHBpcmVzPzogc3RyaW5nfERhdGU7XG4gIHNlY3VyZT86IGJvb2xlYW47XG4gIGh0dHBPbmx5PzogYm9vbGVhbjtcbiAgc3RvcmVVbmVuY29kZWQ/OiBib29sZWFuO1xufVxuIl19