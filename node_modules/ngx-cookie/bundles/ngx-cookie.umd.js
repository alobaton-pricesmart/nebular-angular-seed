(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@nguniversal/express-engine/tokens')) :
    typeof define === 'function' && define.amd ? define('ngx-cookie', ['exports', '@angular/core', '@angular/common', '@nguniversal/express-engine/tokens'], factory) :
    (factory((global['ngx-cookie'] = {}),global.ng.core,global.ng.common,global.tokens));
}(this, (function (exports,core,common,tokens) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isString(obj) {
        return typeof obj === 'string';
    }
    /**
     * @param {?} oldOptions
     * @param {?=} newOptions
     * @return {?}
     */
    function mergeOptions(oldOptions, newOptions) {
        if (!newOptions) {
            return oldOptions;
        }
        return {
            path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,
            domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,
            expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,
            secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,
            httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,
            storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,
        };
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function safeDecodeURIComponent(str) {
        try {
            return decodeURIComponent(str);
        }
        catch (e) {
            return str;
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function safeJsonParse(str) {
        try {
            return JSON.parse(str);
        }
        catch (e) {
            return str;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var COOKIE_OPTIONS = new core.InjectionToken('COOKIE_OPTIONS');
    var CookieOptionsProvider = /** @class */ (function () {
        function CookieOptionsProvider(options, _injector) {
            if (options === void 0) {
                options = {};
            }
            this._injector = _injector;
            this.defaultOptions = {
                path: this._injector.get(common.APP_BASE_HREF, '/'),
                domain: null,
                expires: null,
                secure: false,
                httpOnly: false
            };
            this._options = mergeOptions(this.defaultOptions, options);
        }
        Object.defineProperty(CookieOptionsProvider.prototype, "options", {
            get: /**
             * @return {?}
             */ function () {
                return this._options;
            },
            enumerable: true,
            configurable: true
        });
        CookieOptionsProvider.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CookieOptionsProvider.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [COOKIE_OPTIONS,] }] },
                { type: core.Injector }
            ];
        };
        return CookieOptionsProvider;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CookieService = /** @class */ (function () {
        function CookieService(_optionsProvider) {
            this._optionsProvider = _optionsProvider;
            this.options = this._optionsProvider.options;
        }
        Object.defineProperty(CookieService.prototype, "cookieString", {
            get: /**
             * @return {?}
             */ function () {
                return document.cookie || '';
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                document.cookie = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @name CookieService#get
         *
         * @description
         * Returns the value of given cookie key.
         *
         * @param key Id to use for lookup.
         * @returns Raw cookie value.
         */
        /**
         * \@name CookieService#get
         *
         * \@description
         * Returns the value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Raw cookie value.
         */
        CookieService.prototype.get = /**
         * \@name CookieService#get
         *
         * \@description
         * Returns the value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Raw cookie value.
         */
            function (key) {
                return (( /** @type {?} */(this._cookieReader())))[key];
            };
        /**
         * @name CookieService#getObject
         *
         * @description
         * Returns the deserialized value of given cookie key.
         *
         * @param key Id to use for lookup.
         * @returns Deserialized cookie value.
         */
        /**
         * \@name CookieService#getObject
         *
         * \@description
         * Returns the deserialized value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Deserialized cookie value.
         */
        CookieService.prototype.getObject = /**
         * \@name CookieService#getObject
         *
         * \@description
         * Returns the deserialized value of given cookie key.
         *
         * @param {?} key Id to use for lookup.
         * @return {?} Deserialized cookie value.
         */
            function (key) {
                /** @type {?} */
                var value = this.get(key);
                return value ? safeJsonParse(value) : value;
            };
        /**
         * @name CookieService#getAll
         *
         * @description
         * Returns a key value object with all the cookies.
         *
         * @returns All cookies
         */
        /**
         * \@name CookieService#getAll
         *
         * \@description
         * Returns a key value object with all the cookies.
         *
         * @return {?} All cookies
         */
        CookieService.prototype.getAll = /**
         * \@name CookieService#getAll
         *
         * \@description
         * Returns a key value object with all the cookies.
         *
         * @return {?} All cookies
         */
            function () {
                return ( /** @type {?} */(this._cookieReader()));
            };
        /**
         * @name CookieService#put
         *
         * @description
         * Sets a value for given cookie key.
         *
         * @param key Id for the `value`.
         * @param value Raw value to be stored.
         * @param options (Optional) Options object.
         */
        /**
         * \@name CookieService#put
         *
         * \@description
         * Sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Raw value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        CookieService.prototype.put = /**
         * \@name CookieService#put
         *
         * \@description
         * Sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Raw value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
            function (key, value, options) {
                this._cookieWriter()(key, value, options);
            };
        /**
         * @name CookieService#putObject
         *
         * @description
         * Serializes and sets a value for given cookie key.
         *
         * @param key Id for the `value`.
         * @param value Value to be stored.
         * @param options (Optional) Options object.
         */
        /**
         * \@name CookieService#putObject
         *
         * \@description
         * Serializes and sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        CookieService.prototype.putObject = /**
         * \@name CookieService#putObject
         *
         * \@description
         * Serializes and sets a value for given cookie key.
         *
         * @param {?} key Id for the `value`.
         * @param {?} value Value to be stored.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
            function (key, value, options) {
                this.put(key, JSON.stringify(value), options);
            };
        /**
         * @name CookieService#remove
         *
         * @description
         * Remove given cookie.
         *
         * @param key Id of the key-value pair to delete.
         * @param options (Optional) Options object.
         */
        /**
         * \@name CookieService#remove
         *
         * \@description
         * Remove given cookie.
         *
         * @param {?} key Id of the key-value pair to delete.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
        CookieService.prototype.remove = /**
         * \@name CookieService#remove
         *
         * \@description
         * Remove given cookie.
         *
         * @param {?} key Id of the key-value pair to delete.
         * @param {?=} options (Optional) Options object.
         * @return {?}
         */
            function (key, options) {
                this._cookieWriter()(key, undefined, options);
            };
        /**
         * @name CookieService#removeAll
         *
         * @description
         * Remove all cookies.
         */
        /**
         * \@name CookieService#removeAll
         *
         * \@description
         * Remove all cookies.
         * @param {?=} options
         * @return {?}
         */
        CookieService.prototype.removeAll = /**
         * \@name CookieService#removeAll
         *
         * \@description
         * Remove all cookies.
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                /** @type {?} */
                var cookies = this.getAll();
                Object.keys(cookies).forEach(function (key) {
                    _this.remove(key, options);
                });
            };
        /**
         * @return {?}
         */
        CookieService.prototype._cookieReader = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var lastCookies = {};
                /** @type {?} */
                var lastCookieString = '';
                /** @type {?} */
                var cookieArray;
                /** @type {?} */
                var cookie;
                /** @type {?} */
                var i;
                /** @type {?} */
                var index;
                /** @type {?} */
                var name;
                /** @type {?} */
                var currentCookieString = this.cookieString;
                if (currentCookieString !== lastCookieString) {
                    lastCookieString = currentCookieString;
                    cookieArray = lastCookieString.split('; ');
                    lastCookies = {};
                    for (i = 0; i < cookieArray.length; i++) {
                        cookie = cookieArray[i];
                        index = cookie.indexOf('=');
                        if (index > 0) { // ignore nameless cookies
                            name = safeDecodeURIComponent(cookie.substring(0, index));
                            // the first value that is seen for a cookie is the most
                            // specific one.  values for the same cookie name that
                            // follow are for less specific paths.
                            if (isBlank((( /** @type {?} */(lastCookies)))[name])) {
                                (( /** @type {?} */(lastCookies)))[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                            }
                        }
                    }
                }
                return lastCookies;
            };
        /**
         * @return {?}
         */
        CookieService.prototype._cookieWriter = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var that = this;
                return function (name, value, options) {
                    that.cookieString = that._buildCookieString(name, value, options);
                };
            };
        /**
         * @param {?} name
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        CookieService.prototype._buildCookieString = /**
         * @param {?} name
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
            function (name, value, options) {
                /** @type {?} */
                var opts = mergeOptions(this.options, options);
                /** @type {?} */
                var expires = opts.expires;
                if (isBlank(value)) {
                    expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
                    value = '';
                }
                if (isString(expires)) {
                    expires = new Date(expires);
                }
                /** @type {?} */
                var cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);
                /** @type {?} */
                var str = encodeURIComponent(name) + '=' + cookieValue;
                str += opts.path ? ';path=' + opts.path : '';
                str += opts.domain ? ';domain=' + opts.domain : '';
                str += expires ? ';expires=' + expires.toUTCString() : '';
                str += opts.secure ? ';secure' : '';
                str += opts.httpOnly ? '; HttpOnly' : '';
                // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
                // - 300 cookies
                // - 20 cookies per unique domain
                // - 4096 bytes per cookie
                /** @type {?} */
                var cookieLength = str.length + 1;
                if (cookieLength > 4096) {
                    console.log("Cookie '" + name + "' possibly not set or overflowed because it was too large (" + cookieLength + " > 4096 bytes)!");
                }
                return str;
            };
        CookieService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CookieService.ctorParameters = function () {
            return [
                { type: CookieOptionsProvider }
            ];
        };
        return CookieService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CookieBackendService = /** @class */ (function (_super) {
        __extends(CookieBackendService, _super);
        function CookieBackendService(request, response, _optionsProvider) {
            var _this = _super.call(this, _optionsProvider) || this;
            _this.request = request;
            _this.response = response;
            return _this;
        }
        Object.defineProperty(CookieBackendService.prototype, "cookieString", {
            get: /**
             * @return {?}
             */ function () {
                return this.request.cookie || '';
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this.request.cookie = val;
                this.response.cookie = val;
            },
            enumerable: true,
            configurable: true
        });
        CookieBackendService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CookieBackendService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [tokens.REQUEST,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [tokens.RESPONSE,] }] },
                { type: CookieOptionsProvider }
            ];
        };
        return CookieBackendService;
    }(CookieService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @param {?} cookieOptionsProvider
     * @return {?}
     */
    function cookieServiceFactory(cookieOptionsProvider) {
        return new CookieService(cookieOptionsProvider);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CookieModule = /** @class */ (function () {
        function CookieModule() {
        }
        /**
         * Use this method in your root module to provide the CookieService
         */
        /**
         * Use this method in your root module to provide the CookieService
         * @param {?=} options
         * @return {?}
         */
        CookieModule.forRoot = /**
         * Use this method in your root module to provide the CookieService
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                return {
                    ngModule: CookieModule,
                    providers: [
                        { provide: COOKIE_OPTIONS, useValue: options },
                        { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
                    ]
                };
            };
        /**
         * Use this method in your other (non root) modules to import the directive/pipe
         */
        /**
         * Use this method in your other (non root) modules to import the directive/pipe
         * @param {?=} options
         * @return {?}
         */
        CookieModule.forChild = /**
         * Use this method in your other (non root) modules to import the directive/pipe
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                return {
                    ngModule: CookieModule,
                    providers: [
                        { provide: COOKIE_OPTIONS, useValue: options },
                        { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
                    ]
                };
            };
        CookieModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [CookieOptionsProvider]
                    },] }
        ];
        return CookieModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.CookieService = CookieService;
    exports.CookieBackendService = CookieBackendService;
    exports.COOKIE_OPTIONS = COOKIE_OPTIONS;
    exports.CookieOptionsProvider = CookieOptionsProvider;
    exports.cookieServiceFactory = cookieServiceFactory;
    exports.isBlank = isBlank;
    exports.isPresent = isPresent;
    exports.isString = isString;
    exports.mergeOptions = mergeOptions;
    exports.safeDecodeURIComponent = safeDecodeURIComponent;
    exports.safeJsonParse = safeJsonParse;
    exports.CookieModule = CookieModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,