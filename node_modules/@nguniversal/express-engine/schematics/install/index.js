var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/express-engine/schematics/install/index", ["require", "exports", "@angular-devkit/core", "@angular-devkit/schematics", "@angular-devkit/schematics/tasks", "@schematics/angular/utility/config", "@schematics/angular/utility/dependencies"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var core_1 = require("@angular-devkit/core");
    var schematics_1 = require("@angular-devkit/schematics");
    var tasks_1 = require("@angular-devkit/schematics/tasks");
    var config_1 = require("@schematics/angular/utility/config");
    var dependencies_1 = require("@schematics/angular/utility/dependencies");
    // TODO(CaerusKaru): make these configurable
    var BROWSER_DIST = 'dist/browser';
    var SERVER_DIST = 'dist/server';
    function getClientProject(host, options) {
        var workspace = config_1.getWorkspace(host);
        var clientProject = workspace.projects[options.clientProject];
        if (!clientProject) {
            throw new schematics_1.SchematicsException("Client app " + options.clientProject + " not found.");
        }
        return clientProject;
    }
    function addDependenciesAndScripts(options) {
        return function (host) {
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Default,
                name: '@nguniversal/express-engine',
                version: '0.0.0',
            });
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Default,
                name: '@nguniversal/module-map-ngfactory-loader',
                version: '0.0.0',
            });
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Default,
                name: 'express',
                version: '^4.15.2',
            });
            if (options.webpack) {
                dependencies_1.addPackageJsonDependency(host, {
                    type: dependencies_1.NodeDependencyType.Dev,
                    name: 'ts-loader',
                    version: '^5.2.0',
                });
                dependencies_1.addPackageJsonDependency(host, {
                    type: dependencies_1.NodeDependencyType.Dev,
                    name: 'webpack-cli',
                    version: '^3.1.0',
                });
            }
            var serverFileName = options.serverFileName.replace('.ts', '');
            var pkgPath = '/package.json';
            var buffer = host.read(pkgPath);
            if (buffer === null) {
                throw new schematics_1.SchematicsException('Could not find package.json');
            }
            var pkg = JSON.parse(buffer.toString());
            pkg.scripts['compile:server'] = options.webpack ?
                'webpack --config webpack.server.config.js --progress --colors' :
                "tsc -p " + serverFileName + ".tsconfig.json";
            pkg.scripts['serve:ssr'] = "node dist/" + serverFileName;
            pkg.scripts['build:ssr'] = 'npm run build:client-and-server-bundles && npm run compile:server';
            pkg.scripts['build:client-and-server-bundles'] =
                "ng build --prod && ng run " + options.clientProject + ":server:production";
            host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
            return host;
        };
    }
    function updateConfigFile(options) {
        return function (host) {
            var workspace = config_1.getWorkspace(host);
            if (!workspace.projects[options.clientProject]) {
                throw new schematics_1.SchematicsException("Client app " + options.clientProject + " not found.");
            }
            var clientProject = workspace.projects[options.clientProject];
            if (!clientProject.architect) {
                throw new Error('Client project architect not found.');
            }
            // We have to check if the project config has a server target, because
            // if the Universal step in this schematic isn't run, it can't be guaranteed
            // to exist
            if (!clientProject.architect.server) {
                return;
            }
            clientProject.architect.server.configurations = {
                production: {
                    fileReplacements: [
                        {
                            replace: 'src/environments/environment.ts',
                            with: 'src/environments/environment.prod.ts'
                        }
                    ]
                }
            };
            // TODO(CaerusKaru): make this configurable
            clientProject.architect.server.options.outputPath = SERVER_DIST;
            // TODO(CaerusKaru): make this configurable
            clientProject.architect.build.options.outputPath = BROWSER_DIST;
            var workspacePath = config_1.getWorkspacePath(host);
            host.overwrite(workspacePath, JSON.stringify(workspace, null, 2));
            return host;
        };
    }
    function default_1(options) {
        return function (host, context) {
            var clientProject = getClientProject(host, options);
            if (clientProject.projectType !== 'application') {
                throw new schematics_1.SchematicsException("Universal requires a project type of \"application\".");
            }
            if (!options.skipInstall) {
                context.addTask(new tasks_1.NodePackageInstallTask());
            }
            var rootSource = schematics_1.apply(schematics_1.url('./files/root'), [
                options.skipServer ? schematics_1.filter(function (path) { return !path.startsWith('__serverFileName'); }) : schematics_1.noop(),
                options.webpack ?
                    schematics_1.filter(function (path) { return !path.includes('tsconfig'); }) : schematics_1.filter(function (path) { return !path.startsWith('webpack'); }),
                schematics_1.template(__assign({}, core_1.strings, options, { stripTsExtension: function (s) { return s.replace(/\.ts$/, ''); }, getBrowserDistDirectory: function () { return BROWSER_DIST; }, getServerDistDirectory: function () { return SERVER_DIST; } }))
            ]);
            return schematics_1.chain([
                options.skipUniversal ?
                    schematics_1.noop() : schematics_1.externalSchematic('@schematics/angular', 'universal', options),
                updateConfigFile(options),
                schematics_1.mergeWith(rootSource),
                addDependenciesAndScripts(options),
            ]);
        };
    }
    exports.default = default_1;
});
//# sourceMappingURL=data:application/json;base64,