{"version":3,"file":"server.data-source.js","sourceRoot":"","sources":["../../../../../src/ng2-smart-table/lib/data-source/server/server.data-source.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { LocalDataSource } from '../local/local.data-source';\nimport { ServerSourceConf } from './server-source.conf';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { map } from 'rxjs/operators';\n\nexport class ServerDataSource extends LocalDataSource {\n\n  protected conf: ServerSourceConf;\n\n  protected lastRequestCount: number = 0;\n\n  constructor(protected http: HttpClient, conf: ServerSourceConf | {} = {}) {\n    super();\n\n    this.conf = new ServerSourceConf(conf);\n\n    if (!this.conf.endPoint) {\n      throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n    }\n  }\n\n  count(): number {\n    return this.lastRequestCount;\n  }\n\n  getElements(): Promise<any> {\n    return this.requestElements()\n      .pipe(map(res => {\n        this.lastRequestCount = this.extractTotalFromResponse(res);\n        this.data = this.extractDataFromResponse(res);\n\n        return this.data;\n      })).toPromise();\n  }\n\n  /**\n   * Extracts array of data from server response\n   * @param res\n   * @returns {any}\n   */\n  protected extractDataFromResponse(res: any): Array<any> {\n    const rawData = res.body;\n    const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n\n    if (data instanceof Array) {\n      return data;\n    }\n\n    throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n  }\n\n  /**\n   * Extracts total rows count from the server response\n   * Looks for the count in the heders first, then in the response body\n   * @param res\n   * @returns {any}\n   */\n  protected extractTotalFromResponse(res: any): number {\n    if (res.headers.has(this.conf.totalKey)) {\n      return +res.headers.get(this.conf.totalKey);\n    } else {\n      const rawData = res.body;\n      return getDeepFromObject(rawData, this.conf.totalKey, 0);\n    }\n  }\n\n  protected requestElements(): Observable<any> {\n    let httpParams = this.createRequesParams();\n    return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });\n  }\n\n  protected createRequesParams(): HttpParams {\n    let httpParams = new HttpParams();\n\n    httpParams = this.addSortRequestParams(httpParams);\n    httpParams = this.addFilterRequestParams(httpParams);\n    return this.addPagerRequestParams(httpParams);\n  }\n\n  protected addSortRequestParams(httpParams: HttpParams): HttpParams {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n        httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addFilterRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.filterConf.filters) {\n      this.filterConf.filters.forEach((fieldConf: any) => {\n        if (fieldConf['search']) {\n          httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n        }\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addPagerRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n      httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n    }\n\n    return httpParams;\n  }\n}\n"]}