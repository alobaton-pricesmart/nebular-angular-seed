{"version":3,"file":"data-set.js","sourceRoot":"","sources":["../../../../src/ng2-smart-table/lib/data-set/data-set.ts"],"names":[],"mappings":"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","sourcesContent":["import { Row } from './row';\nimport { Column } from './column';\n\nexport class DataSet {\n\n  newRow: Row;\n\n  protected data: Array<any> = [];\n  protected columns: Array<Column> = [];\n  protected rows: Array<Row> = [];\n  protected selectedRow: Row;\n  protected willSelect: string = 'first';\n\n  constructor(data: Array<any> = [], protected columnSettings: Object) {\n    this.createColumns(columnSettings);\n    this.setData(data);\n\n    this.createNewRow();\n  }\n\n  setData(data: Array<any>) {\n    this.data = data;\n    this.createRows();\n  }\n\n  getColumns(): Array<Column> {\n    return this.columns;\n  }\n\n  getRows(): Array<Row> {\n    return this.rows;\n  }\n\n  getFirstRow(): Row {\n    return this.rows[0];\n  }\n\n  getLastRow(): Row {\n    return this.rows[this.rows.length - 1];\n  }\n\n  findRowByData(data: any): Row {\n    return this.rows.find((row: Row) => row.getData() === data);\n  }\n\n  deselectAll() {\n    this.rows.forEach((row) => {\n      row.isSelected = false;\n    });\n  }\n\n  selectRow(row: Row): Row {\n    const previousIsSelected = row.isSelected;\n    this.deselectAll();\n\n    row.isSelected = !previousIsSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  multipleSelectRow(row: Row): Row {\n    row.isSelected = !row.isSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  selectPreviousRow(): Row {\n    if (this.rows.length > 0) {\n      let index = this.selectedRow ? this.selectedRow.index : 0;\n      if (index > this.rows.length - 1) {\n        index = this.rows.length - 1;\n      }\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n  }\n\n  selectFirstRow(): Row {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[0]);\n      return this.selectedRow;\n    }\n  }\n\n  selectLastRow(): Row {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[this.rows.length - 1]);\n      return this.selectedRow;\n    }\n  }\n\n  willSelectFirstRow() {\n    this.willSelect = 'first';\n  }\n\n  willSelectLastRow() {\n    this.willSelect = 'last';\n  }\n\n  select(): Row {\n    if (this.getRows().length === 0) {\n      return;\n    }\n    if (this.willSelect) {\n      if (this.willSelect === 'first') {\n        this.selectFirstRow();\n      }\n      if (this.willSelect === 'last') {\n        this.selectLastRow();\n      }\n      this.willSelect = '';\n    } else {\n      this.selectFirstRow();\n    }\n\n    return this.selectedRow;\n  }\n\n  createNewRow() {\n    this.newRow = new Row(-1, {}, this);\n    this.newRow.isInEditing = true;\n  }\n\n  /**\n   * Create columns by mapping from the settings\n   * @param settings\n   * @private\n   */\n  createColumns(settings: any) {\n    for (const id in settings) {\n      if (settings.hasOwnProperty(id)) {\n        this.columns.push(new Column(id, settings[id], this));\n      }\n    }\n  }\n\n  /**\n   * Create rows based on current data prepared in data source\n   * @private\n   */\n  createRows() {\n    this.rows = [];\n    this.data.forEach((el, index) => {\n      this.rows.push(new Row(index, el, this));\n    });\n  }\n}\n"]}