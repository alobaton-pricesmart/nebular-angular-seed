{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../../src/ng2-smart-table/lib/grid.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\n\nimport { Deferred, getDeepFromObject } from './helpers';\nimport { Column } from './data-set/column';\nimport { Row } from './data-set/row';\nimport { DataSet } from './data-set/data-set';\nimport { DataSource } from './data-source/data-source';\n\nexport class Grid {\n\n  createFormShown: boolean = false;\n\n  source: DataSource;\n  settings: any;\n  dataSet: DataSet;\n\n  onSelectRowSource = new Subject<any>();\n\n  constructor(source: DataSource, settings: any) {\n    this.setSettings(settings);\n    this.setSource(source);\n  }\n\n  showActionColumn(position: string): boolean {\n    return this.isCurrentActionsPosition(position) && this.isActionsVisible();\n  }\n\n  isCurrentActionsPosition(position: string): boolean {\n    return position == this.getSetting('actions.position');\n  }\n\n  isActionsVisible(): boolean {\n    return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\n  }\n\n  isMultiSelectVisible(): boolean {\n    return this.getSetting('selectMode') === 'multi';\n  }\n\n  getNewRow(): Row {\n    return this.dataSet.newRow;\n  }\n\n  setSettings(settings: Object) {\n    this.settings = settings;\n    this.dataSet = new DataSet([], this.getSetting('columns'));\n\n    if (this.source) {\n      this.source.refresh();\n    }\n  }\n\n  getDataSet(): DataSet {\n    return this.dataSet;\n  }\n\n  setSource(source: DataSource) {\n    this.source = this.prepareSource(source);\n\n    this.source.onChanged().subscribe((changes: any) => this.processDataChange(changes));\n\n    this.source.onUpdated().subscribe((data: any) => {\n      const changedRow = this.dataSet.findRowByData(data);\n      changedRow.setData(data);\n    });\n  }\n\n  getSetting(name: string, defaultValue?: any): any {\n    return getDeepFromObject(this.settings, name, defaultValue);\n  }\n\n  getColumns(): Array<Column> {\n    return this.dataSet.getColumns();\n  }\n\n  getRows(): Array<Row> {\n    return this.dataSet.getRows();\n  }\n\n  selectRow(row: Row) {\n    this.dataSet.selectRow(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.dataSet.multipleSelectRow(row);\n  }\n\n  onSelectRow(): Observable<any> {\n    return this.onSelectRowSource.asObservable();\n  }\n\n  edit(row: Row) {\n    row.isInEditing = true;\n  }\n\n  create(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipAdd) {\n        this.createFormShown = false;\n      } else {\n        this.source.prepend(newData).then(() => {\n          this.createFormShown = false;\n          this.dataSet.createNewRow();\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('add.confirmCreate')) {\n      confirmEmitter.emit({\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  save(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipEdit) {\n        row.isInEditing = false;\n      } else {\n        this.source.update(row.getData(), newData).then(() => {\n          row.isInEditing = false;\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('edit.confirmSave')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  delete(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then(() => {\n      this.source.remove(row.getData());\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('delete.confirmDelete')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  processDataChange(changes: any) {\n    if (this.shouldProcessChange(changes)) {\n      this.dataSet.setData(changes['elements']);\n      if (this.getSetting('selectMode') !== 'multi') {\n        const row = this.determineRowToSelect(changes);\n\n        if (row) {\n          this.onSelectRowSource.next(row);\n        }\n      }\n    }\n  }\n\n  shouldProcessChange(changes: any): boolean {\n    if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\n      return true;\n    } else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // TODO: move to selectable? Separate directive\n  determineRowToSelect(changes: any): Row {\n\n    if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\n      return this.dataSet.select();\n    }\n    if (changes['action'] === 'remove') {\n      if (changes['elements'].length === 0) {\n        // we have to store which one to select as the data will be reloaded\n        this.dataSet.willSelectLastRow();\n      } else {\n        return this.dataSet.selectPreviousRow();\n      }\n    }\n    if (changes['action'] === 'append') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectLastRow();\n    }\n    if (changes['action'] === 'add') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'update') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'prepend') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectFirstRow();\n    }\n    return null;\n  }\n\n  prepareSource(source: any): DataSource {\n    const initialSource: any = this.getInitialSort();\n    if (initialSource && initialSource['field'] && initialSource['direction']) {\n      source.setSort([initialSource], false);\n    }\n    if (this.getSetting('pager.display') === true) {\n      source.setPaging(1, this.getSetting('pager.perPage'), false);\n    }\n\n    source.refresh();\n    return source;\n  }\n\n  getInitialSort() {\n    const sortConf: any = {};\n    this.getColumns().forEach((column: Column) => {\n      if (column.isSortable && column.defaultSortDirection) {\n        sortConf['field'] = column.id;\n        sortConf['direction'] = column.defaultSortDirection;\n        sortConf['compare'] = column.getCompareFunction();\n      }\n    });\n    return sortConf;\n  }\n\n  getSelectedRows(): Array<any> {\n    return this.dataSet.getRows()\n      .filter(r => r.isSelected);\n  }\n\n  selectAllRows(status: any) {\n    this.dataSet.getRows()\n      .forEach(r => r.isSelected = status);\n  }\n\n  getFirstRow(): Row {\n    return this.dataSet.getFirstRow();\n  }\n\n  getLastRow(): Row {\n    return this.dataSet.getLastRow();\n  }\n\n}\n"]}