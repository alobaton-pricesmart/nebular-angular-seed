{"version":3,"file":"acl.service.js","sourceRoot":"","sources":["../../../../.ng_build/security/services/acl.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { NB_SECURITY_OPTIONS_TOKEN, NbAclOptions, NbAclRole, NbAccessControl } from '../security.options';\n\nconst shallowObjectClone = (o) => Object.assign({}, o);\nconst shallowArrayClone = (a) => Object.assign([], a);\nconst popParent = (abilities) => {\n  const parent = abilities['parent'];\n  delete abilities['parent'];\n  return parent;\n};\n\n/**\n * Common acl service.\n */\n@Injectable()\nexport class NbAclService {\n\n  private static readonly ANY_RESOURCE = '*';\n\n  private state: NbAccessControl = {};\n\n  constructor(@Optional() @Inject(NB_SECURITY_OPTIONS_TOKEN) protected settings: NbAclOptions = {}) {\n\n    if (settings.accessControl) {\n      this.setAccessControl(settings.accessControl);\n    }\n  }\n\n  /**\n   * Set/Reset ACL list\n   * @param {NbAccessControl} list\n   */\n  setAccessControl(list: NbAccessControl) {\n    for (const [role, value] of Object.entries(list)) {\n      const abilities = shallowObjectClone(value);\n      const parent = popParent(abilities);\n      this.register(role, parent, abilities);\n    }\n  }\n\n  /**\n   * Register a new role with a list of abilities (permission/resources combinations)\n   * @param {string} role\n   * @param {string} parent\n   * @param {[permission: string]: string|string[]} abilities\n   */\n  register(role: string, parent: string = null, abilities: {[permission: string]: string|string[]} = {}) {\n\n    this.validateRole(role);\n\n    this.state[role] = {\n      parent: parent,\n    };\n\n    for (const [permission, value] of Object.entries(abilities)) {\n      const resources = typeof value === 'string' ? [value] : value;\n      this.allow(role, permission, shallowArrayClone(resources));\n    }\n  }\n\n  /**\n   * Allow a permission for specific resources to a role\n   * @param {string} role\n   * @param {string} permission\n   * @param {string | string[]} resource\n   */\n  allow(role: string, permission: string, resource: string|string[]) {\n\n    this.validateRole(role);\n\n    if (!this.getRole(role)) {\n      this.register(role, null, {});\n    }\n\n    resource = typeof resource === 'string' ? [resource] : resource;\n\n    let resources = shallowArrayClone(this.getRoleResources(role, permission));\n    resources = resources.concat(resource);\n\n    this.state[role][permission] = resources\n      .filter((item, pos) => resources.indexOf(item) === pos);\n  }\n\n  /**\n   * Check whether the role has a permission to a resource\n   * @param {string} role\n   * @param {string} permission\n   * @param {string} resource\n   * @returns {boolean}\n   */\n  can(role: string, permission: string, resource: string) {\n    this.validateResource(resource);\n\n    const parentRole = this.getRoleParent(role);\n    const parentCan = parentRole && this.can(this.getRoleParent(role), permission, resource);\n    return parentCan || this.exactCan(role, permission, resource);\n  }\n\n  private getRole(role: string): NbAclRole {\n    return this.state[role];\n  }\n\n  private validateRole(role: string) {\n    if (!role) {\n      throw new Error('NbAclService: role name cannot be empty');\n    }\n  }\n\n  private validateResource(resource: string) {\n    if (!resource || [NbAclService.ANY_RESOURCE].includes(resource)) {\n      throw new Error(`NbAclService: cannot use empty or bulk '*' resource placeholder with 'can' method`);\n    }\n  }\n\n  private exactCan(role: string, permission: string, resource: string) {\n    const resources = this.getRoleResources(role, permission);\n    return resources.includes(resource) || resources.includes(NbAclService.ANY_RESOURCE);\n  }\n\n  private getRoleResources(role: string, permission: string): string[] {\n    return this.getRoleAbilities(role)[permission] || [];\n  }\n\n  private getRoleAbilities(role: string): {[permission: string]: string[]} {\n    const abilities = shallowObjectClone(this.state[role] || {});\n    popParent(shallowObjectClone(this.state[role] || {}));\n    return abilities;\n  }\n\n  private getRoleParent(role: string): string {\n    return this.state[role] ? this.state[role]['parent'] : null;\n  }\n}\n"]}