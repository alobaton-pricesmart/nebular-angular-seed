{"version":3,"file":"access-checker.service.js","sourceRoot":"","sources":["../../../../.ng_build/security/services/access-checker.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;GAIG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE7C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC;;;;GAIG;AAEH;IAEE,yBAAsB,YAA4B,EAAY,GAAiB;QAAzD,iBAAY,GAAZ,YAAY,CAAgB;QAAY,QAAG,GAAH,GAAG,CAAc;IAC/E,CAAC;IAED;;;;;;OAMG;IACH,mCAAS,GAAT,UAAU,UAAkB,EAAE,QAAgB;QAA9C,iBAQC;QAPC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;aAC/B,IAAI,CACH,GAAG,CAAC,UAAC,IAAqB,IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAnC,CAAmC,CAAC,EACnE,GAAG,CAAC,UAAC,KAAe;YAClB,OAAO,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAxC,CAAwC,CAAC,CAAC;QACtE,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IApBU,eAAe;QAD3B,UAAU,EAAE;yCAGyB,cAAc,EAAiB,YAAY;OAFpE,eAAe,CAqB3B;IAAD,sBAAC;CAAA,AArBD,IAqBC;SArBY,eAAe","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable } from '@angular/core';\nimport { NbRoleProvider } from './role.provider';\nimport { NbAclService } from './acl.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Access checker service.\n *\n * Injects `NbRoleProvider` to determine current user role, and checks access permissions using `NbAclService`\n */\n@Injectable()\nexport class NbAccessChecker {\n\n  constructor(protected roleProvider: NbRoleProvider, protected acl: NbAclService) {\n  }\n\n  /**\n   * Checks whether access is granted or not\n   *\n   * @param {string} permission\n   * @param {string} resource\n   * @returns {Observable<boolean>}\n   */\n  isGranted(permission: string, resource: string): Observable<boolean> {\n    return this.roleProvider.getRole()\n      .pipe(\n        map((role: string|string[]) => Array.isArray(role) ? role : [role]),\n        map((roles: string[]) => {\n          return roles.some(role => this.acl.can(role, permission, resource));\n        }),\n      );\n  }\n}\n"]}