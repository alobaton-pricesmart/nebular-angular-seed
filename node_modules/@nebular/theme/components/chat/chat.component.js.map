{"version":3,"file":"chat.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/chat/chat.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  Component,\n  Input,\n  HostBinding,\n  ViewChild,\n  ElementRef,\n  ContentChildren,\n  QueryList, AfterViewInit,\n} from '@angular/core';\nimport { convertToBoolProperty } from '../helpers';\nimport { NbChatMessageComponent } from './chat-message.component';\n\n/**\n * Conversational UI collection - a set of components for chat-like UI construction.\n *\n * Main features:\n * - different message types support (text, image, file, file group, map, etc)\n * - drag & drop for images and files with preview\n * - different UI styles\n * - custom action buttons (coming soon)\n *\n * Here's a complete example build in a bot-like app. Type `help` to be able to receive different message types.\n * Enjoy the conversation and the beautiful UI.\n * @stacked-example(Showcase, chat/chat-showcase.component)\n *\n * Basic chat configuration and usage:\n * ```ts\n * <nb-chat title=\"Nebular Conversational UI\">\n *       <nb-chat-message *ngFor=\"let msg of messages\"\n *                        [type]=\"msg.type\"\n *                        [message]=\"msg.text\"\n *                        [reply]=\"msg.reply\"\n *                        [sender]=\"msg.user.name\"\n *                        [date]=\"msg.date\"\n *                        [files]=\"msg.files\"\n *                        [quote]=\"msg.quote\"\n *                        [latitude]=\"msg.latitude\"\n *                        [longitude]=\"msg.longitude\"\n *                        [avatar]=\"msg.user.avatar\">\n *   </nb-chat-message>\n *\n *   <nb-chat-form (send)=\"sendMessage($event)\" [dropFiles]=\"true\">\n *   </nb-chat-form>\n * </nb-chat>\n * ```\n * ### Installation\n *\n * Import `NbChatModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbChatModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * If you need to provide an API key for a `map` message type (which is required by Google Maps)\n * you may use `NbChatModule.forRoot({ ... })` call if this is a global app configuration\n * or `NbChatModule.forChild({ ... })` for a feature module configuration:\n *\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbChatModule.forRoot({ messageGoogleMapKey: 'MAP_KEY' }),\n *   ],\n * })\n * export class AppModule { }\n *\n * ### Usage\n *\n * There are three main components:\n * ```ts\n * <nb-chat>\n * </nb-chat> // chat container\n *\n * <nb-chat-form>\n * </nb-chat-form> // chat form with drag&drop files feature\n *\n * <nb-chat-message>\n * </nb-chat-message> // chat message, available multiple types\n * ```\n *\n * Two users conversation showcase:\n * @stacked-example(Conversation, chat/chat-conversation-showcase.component)\n *\n * Chat UI is also available in different colors by specifying a `[status]` input:\n *\n * @stacked-example(Colored Chat, chat/chat-colors.component)\n *\n * Also it is possible to configure sizes through `[size]` input:\n *\n * @stacked-example(Chat Sizes, chat/chat-sizes.component)\n *\n * @styles\n *\n * chat-font-size:\n * chat-fg:\n * chat-bg:\n * chat-border-radius:\n * chat-fg-text:\n * chat-height-xxsmall:\n * chat-height-xsmall:\n * chat-height-small:\n * chat-height-medium:\n * chat-height-large:\n * chat-height-xlarge:\n * chat-height-xxlarge:\n * chat-border:\n * chat-padding:\n * chat-shadow:\n * chat-separator:\n * chat-active-bg:\n * chat-disabled-bg:\n * chat-disabled-fg:\n * chat-primary-bg:\n * chat-info-bg:\n * chat-success-bg:\n * chat-warning-bg:\n * chat-danger-bg:\n */\n@Component({\n  selector: 'nb-chat',\n  styleUrls: ['./chat.component.css'],\n  template: `\n    <div class=\"header\">{{ title }}</div>\n    <div class=\"scrollable\" #scrollable>\n      <div class=\"messages\">\n        <ng-content select=\"nb-chat-message\"></ng-content>\n        <p class=\"no-messages\" *ngIf=\"!messages?.length\">No messages yet.</p>\n      </div>\n    </div>\n    <div class=\"form\">\n      <ng-content select=\"nb-chat-form\"></ng-content>\n    </div>\n  `,\n})\nexport class NbChatComponent implements AfterViewInit {\n\n  static readonly SIZE_XXSMALL = 'xxsmall';\n  static readonly SIZE_XSMALL = 'xsmall';\n  static readonly SIZE_SMALL = 'small';\n  static readonly SIZE_MEDIUM = 'medium';\n  static readonly SIZE_LARGE = 'large';\n  static readonly SIZE_XLARGE = 'xlarge';\n  static readonly SIZE_XXLARGE = 'xxlarge';\n\n  static readonly STATUS_ACTIVE = 'active';\n  static readonly STATUS_DISABLED = 'disabled';\n  static readonly STATUS_PRIMARY = 'primary';\n  static readonly STATUS_INFO = 'info';\n  static readonly STATUS_SUCCESS = 'success';\n  static readonly STATUS_WARNING = 'warning';\n  static readonly STATUS_DANGER = 'danger';\n\n  size: string;\n  status: string;\n  accent: string;\n  scrollBottom: boolean = true;\n\n  @Input() title: string;\n\n  @HostBinding('class.xxsmall-chat')\n  get xxsmall() {\n    return this.size === NbChatComponent.SIZE_XXSMALL;\n  }\n\n  @HostBinding('class.xsmall-chat')\n  get xsmall() {\n    return this.size === NbChatComponent.SIZE_XSMALL;\n  }\n\n  @HostBinding('class.small-chat')\n  get small() {\n    return this.size === NbChatComponent.SIZE_SMALL;\n  }\n\n  @HostBinding('class.medium-chat')\n  get medium() {\n    return this.size === NbChatComponent.SIZE_MEDIUM;\n  }\n\n  @HostBinding('class.large-chat')\n  get large() {\n    return this.size === NbChatComponent.SIZE_LARGE;\n  }\n\n  @HostBinding('class.xlarge-chat')\n  get xlarge() {\n    return this.size === NbChatComponent.SIZE_XLARGE;\n  }\n\n  @HostBinding('class.xxlarge-chat')\n  get xxlarge() {\n    return this.size === NbChatComponent.SIZE_XXLARGE;\n  }\n\n  @HostBinding('class.active-chat')\n  get active() {\n    return this.status === NbChatComponent.STATUS_ACTIVE;\n  }\n\n  @HostBinding('class.disabled-chat')\n  get disabled() {\n    return this.status === NbChatComponent.STATUS_DISABLED;\n  }\n\n  @HostBinding('class.primary-chat')\n  get primary() {\n    return this.status === NbChatComponent.STATUS_PRIMARY;\n  }\n\n  @HostBinding('class.info-chat')\n  get info() {\n    return this.status === NbChatComponent.STATUS_INFO;\n  }\n\n  @HostBinding('class.success-chat')\n  get success() {\n    return this.status === NbChatComponent.STATUS_SUCCESS;\n  }\n\n  @HostBinding('class.warning-chat')\n  get warning() {\n    return this.status === NbChatComponent.STATUS_WARNING;\n  }\n\n  @HostBinding('class.danger-chat')\n  get danger() {\n    return this.status === NbChatComponent.STATUS_DANGER;\n  }\n\n  @HostBinding('class.accent')\n  get hasAccent() {\n    return this.accent;\n  }\n\n  /**\n   * Chat size, available sizes:\n   * xxsmall, xsmall, small, medium, large, xlarge, xxlarge\n   * @param {string} val\n   */\n  @Input('size')\n  private set setSize(val: string) {\n    this.size = val;\n  }\n\n  /**\n   * Chat status color (adds specific styles):\n   * active, disabled, primary, info, success, warning, danger\n   * @param {string} val\n   */\n  @Input('status')\n  private set setStatus(val: string) {\n    this.status = val;\n  }\n\n  /**\n   * Scroll chat to the bottom of the list when a new message arrives\n   * @param {boolean} val\n   */\n  @Input('scrollBottom')\n  private set setScrollBottom(val: boolean) {\n    this.scrollBottom = convertToBoolProperty(val);\n  }\n\n  @ViewChild('scrollable') scrollable: ElementRef;\n  @ContentChildren(NbChatMessageComponent) messages: QueryList<NbChatMessageComponent>;\n\n  ngAfterViewInit() {\n    this.messages.changes\n      .subscribe((messages) => {\n        this.messages = messages;\n        this.updateView();\n      });\n\n    this.updateView();\n  }\n\n  updateView() {\n    if (this.scrollBottom) {\n      this.scrollListBottom();\n    }\n  }\n\n  scrollListBottom() {\n    this.scrollable.nativeElement.scrollTop = this.scrollable.nativeElement.scrollHeight;\n  }\n}\n"]}