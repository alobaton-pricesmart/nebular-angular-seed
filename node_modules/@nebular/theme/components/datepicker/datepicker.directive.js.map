{"version":3,"file":"datepicker.directive.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/datepicker/datepicker.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Type } from '@angular/core/src/type';\nimport { fromEvent, Observable, merge } from 'rxjs';\nimport { map, takeWhile, filter, take, tap } from 'rxjs/operators';\n\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { NbDateService } from '../calendar-kit';\n\n\n/**\n * The `NbDatepickerAdapter` instances provide way how to parse, format and validate\n * different date types.\n * */\nexport abstract class NbDatepickerAdapter<D> {\n  /**\n   * Picker component class.\n   * */\n  abstract picker: Type<any>;\n\n  /**\n   * Parse date string according to the format.\n   * */\n  abstract parse(value: string, format: string): D;\n\n  /**\n   * Format date according to the format.\n   * */\n  abstract format(value: D, format: string): string;\n\n  /**\n   * Validates date string according to the passed format.\n   * */\n  abstract isValid(value: string, format: string): boolean;\n}\n\n/**\n * Validators config that will be used by form control to perform proper validation.\n * */\nexport interface NbPickerValidatorConfig<D> {\n  /**\n   * Minimum date available in picker.\n   * */\n  min: D;\n\n  /**\n   * Maximum date available in picker.\n   * */\n  max: D;\n\n  /**\n   * Predicate that determines is value available for picking.\n   * */\n  filter: (D) => boolean;\n}\n\n/**\n * Datepicker is an control that can pick any values anyway.\n * It has to be bound to the datepicker directive through nbDatepicker input.\n * */\nexport abstract class NbDatepicker<T> {\n  /**\n   * HTML input element date format.\n   * */\n  abstract format: string;\n\n  abstract get value(): T | undefined;\n\n  abstract set value(value: T);\n\n  abstract get valueChange(): Observable<T>;\n\n  abstract get init(): Observable<void>;\n\n  /**\n   * Attaches datepicker to the native input element.\n   * */\n  abstract attach(hostRef: ElementRef);\n\n  /**\n   * Returns validator configuration based on the input properties.\n   * */\n  abstract getValidatorConfig(): NbPickerValidatorConfig<T>;\n\n  abstract show();\n\n  abstract hide();\n\n  abstract shouldHide(): boolean;\n\n  abstract get isShown(): boolean;\n\n  abstract get blur(): Observable<void>;\n}\n\nexport const NB_DATE_ADAPTER = new InjectionToken<NbDatepickerAdapter<any>>('Datepicker Adapter');\n\nexport const NB_DATE_SERVICE_OPTIONS = new InjectionToken('Date service options');\n\n/**\n * The `NbDatepickerDirective` is form control that gives you ability to select dates and ranges. The datepicker\n * is shown when input receives a `focus` event.\n *\n * ```html\n * <input [nbDatepicker]=\"datepicker\">\n * <nb-datepicker #datepicker></nb-datepicker>\n * ```\n *\n * @stacked-example(Showcase, datepicker/datepicker-showcase.component)\n *\n * ### Installation\n *\n * Import `NbDatepickerModule.forRoot()` to your root module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDatepickerModule.forRoot(),\n *   ],\n * })\n * export class AppModule { }\n * ```\n * And `NbDatepickerModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDatepickerModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * If you want to use range selection, you have to use `NbRangepickerComponent` instead:\n *\n * ```html\n * <input [nbDatepicker]=\"rangepicker\">\n * <nb-rangepicker #rangepicker></nb-rangepicker>\n * ```\n *\n * Both range and date pickers support all parameters as calendar, so, check `NbCalendarComponent` for additional\n * info.\n *\n * @stacked-example(Range showcase, datepicker/rangepicker-showcase.component)\n *\n * Datepicker is the form control so it can be bound with angular forms through ngModel and form controls.\n *\n * @stacked-example(Forms, datepicker/datepicker-forms.component)\n *\n * `NbDatepickerDirective` may be validated using `min` and `max` dates passed to the datepicker.\n * And `filter` predicate that receives date object and has to return a boolean value.\n *\n * @stacked-example(Validation, datepicker/datepicker-validation.component)\n *\n * The `NbDatepickerComponent` supports date formatting:\n *\n * ```html\n * <input [nbDatepicker]=\"datepicker\">\n * <nb-datepicker #datepicker format=\"MM\\dd\\yyyy\"></nb-datepicker>\n * ```\n *\n * ## Formatting Issue\n *\n * By default, datepicker uses angulars `LOCALE_ID` token for localization and `DatePipe` for dates formatting.\n * And native `Date.parse(...)` for dates parsing. But native `Date.parse` function doesn't support formats.\n * To provide custom formatting you have to use one of the following packages:\n *\n * - `@nebular/moment` - provides moment date adapter that uses moment for date objects. This means datepicker than\n * will operate only moment date objects. If you want to use it you have to install it: `npm i @nebular/moment`, and\n * import `NbMomentDateModule` from this package.\n *\n * - `@nebular/date-fns` - adapter for popular date-fns library. This way is preferred if you need only date formatting.\n * Because date-fns is treeshakable, tiny and operates native date objects. If you want to use it you have to\n * install it: `npm i @nebular/date-fns`, and import `NbDateFnsDateModule` from this package.\n *\n * ### NbDateFnsDateModule\n *\n * Format is required when using `NbDateFnsDateModule`. You can set it via `format` input on datepicker component:\n * ```html\n * <nb-datepicker format=\"dd.MM.yyyy\"></nb-datepicker>\n * ```\n * Also format can be set globally with `NbDateFnsDateModule.forRoot({ format: 'dd.MM.yyyy' })` and\n * `NbDateFnsDateModule.forChild({ format: 'dd.MM.yyyy' })` methods.\n *\n * Please note to use some of the formatting tokens you also need to pass `{ awareOfUnicodeTokens: true }` to date-fns\n * parse and format functions. You can configure options passed this functions by setting `formatOptions` and\n * `parseOptions` of options object passed to `NbDateFnsDateModule.forRoot` and `NbDateFnsDateModule.forChild` methods.\n * ```ts\n * NbDateFnsDateModule.forRoot({\n *   parseOptions: { awareOfUnicodeTokens: true },\n *   formatOptions: { awareOfUnicodeTokens: true },\n * })\n * ```\n * Further info on `date-fns` formatting tokens could be found at\n * [date-fns docs](https://date-fns.org/v2.0.0-alpha.27/docs/Unicode-Tokens).\n *\n * You can also use `parseOptions` and `formatOptions` to provide locale.\n * ```ts\n * import { eo } from 'date-fns/locale';\n *\n * @NgModule({\n *   imports: [\n *     NbDateFnsDateModule.forRoot({\n *       parseOptions: { locale: eo },\n *       formatOptions: { locale: eo },\n *     }),\n *   ],\n * })\n * ```\n *\n * @styles\n *\n * datepicker-fg\n * datepicker-bg\n * datepicker-border\n * datepicker-border-radius\n * datepicker-shadow\n * datepicker-arrow-size\n * */\n@Directive({\n  selector: 'input[nbDatepicker]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NbDatepickerDirective),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => NbDatepickerDirective),\n      multi: true,\n    },\n  ],\n})\nexport class NbDatepickerDirective<D> implements OnDestroy, ControlValueAccessor, Validator {\n  /**\n   * Provides datepicker component.\n   * */\n  @Input('nbDatepicker')\n  set setPicker(picker: NbDatepicker<D>) {\n    this.picker = picker;\n    this.setupPicker();\n  }\n\n  /**\n   * Datepicker adapter.\n   * */\n  protected datepickerAdapter: NbDatepickerAdapter<D>;\n\n  /**\n   * Datepicker instance.\n   * */\n  protected picker: NbDatepicker<D>;\n  protected alive: boolean = true;\n  protected isDatepickerReady: boolean = false;\n  protected queue: D | undefined;\n  protected onChange: (D) => void = () => {};\n  protected onTouched: () => void = () => {};\n\n  /**\n   * Form control validators will be called in validators context, so, we need to bind them.\n   * */\n  protected validator: ValidatorFn = Validators.compose([\n    this.parseValidator,\n    this.minValidator,\n    this.maxValidator,\n    this.filterValidator,\n  ].map(fn => fn.bind(this)));\n\n  constructor(@Inject(NB_DOCUMENT) protected document,\n              @Inject(NB_DATE_ADAPTER) protected datepickerAdapters: NbDatepickerAdapter<D>[],\n              protected hostRef: ElementRef,\n              protected dateService: NbDateService<D>,\n              protected changeDetector: ChangeDetectorRef) {\n    this.subscribeOnInputChange();\n  }\n\n  /**\n   * Returns html input element.\n   * */\n  get input(): HTMLInputElement {\n    return this.hostRef.nativeElement;\n  }\n\n  /**\n   * Returns host input value.\n   * */\n  get inputValue(): string {\n    return this.input.value;\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n\n  /**\n   * Writes value in picker and html input element.\n   * */\n  writeValue(value: D) {\n    if (this.isDatepickerReady) {\n      this.writePicker(value);\n      this.writeInput(value);\n    } else {\n      this.queue = value;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.input.disabled = isDisabled;\n  }\n\n  /**\n   * Form control validation based on picker validator config.\n   * */\n  validate(): ValidationErrors | null {\n    return this.validator(null);\n  }\n\n  /**\n   * Hides picker, focuses the input\n   */\n  protected hidePicker() {\n    this.input.focus();\n    this.picker.hide();\n  }\n\n  /**\n   * Validates that we can parse value correctly.\n   * */\n  protected parseValidator(): ValidationErrors | null {\n    const isValid = this.datepickerAdapter.isValid(this.inputValue, this.picker.format);\n    return isValid ? null : { nbDatepickerParse: { value: this.inputValue } };\n  }\n\n  /**\n   * Validates passed value is greater than min.\n   * */\n  protected minValidator(): ValidationErrors | null {\n    const config = this.picker.getValidatorConfig();\n    const date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);\n    return (!config.min || !date || this.dateService.compareDates(config.min, date) <= 0) ?\n      null : { nbDatepickerMin: { min: config.min, actual: date } };\n  }\n\n  /**\n   * Validates passed value is smaller than max.\n   * */\n  protected maxValidator(): ValidationErrors | null {\n    const config = this.picker.getValidatorConfig();\n    const date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);\n    return (!config.max || !date || this.dateService.compareDates(config.max, date) >= 0) ?\n      null : { nbDatepickerMax: { max: config.max, actual: date } };\n  }\n\n  /**\n   * Validates passed value satisfy the filter.\n   * */\n  protected filterValidator(): ValidationErrors | null {\n    const config = this.picker.getValidatorConfig();\n    const date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);\n    return (!config.filter || !date || config.filter(date)) ?\n      null : { nbDatepickerFilter: true };\n  }\n\n  /**\n   * Chooses datepicker adapter based on passed picker component.\n   * */\n  protected chooseDatepickerAdapter() {\n    this.datepickerAdapter = this.datepickerAdapters.find(({ picker }) => this.picker instanceof picker);\n\n    if (this.noDatepickerAdapterProvided()) {\n      throw new Error('No datepickerAdapter provided for picker');\n    }\n  }\n\n  /**\n   * Attaches picker to the host input element and subscribes on value changes.\n   * */\n  protected setupPicker() {\n    this.chooseDatepickerAdapter();\n    this.picker.attach(this.hostRef);\n\n    if (this.inputValue) {\n      this.picker.value = this.datepickerAdapter.parse(this.inputValue, this.picker.format);\n    }\n\n    // In case datepicker component placed after the input with datepicker directive,\n    // we can't read `this.picker.format` on first change detection run,\n    // since it's not bound yet, so we have to wait for datepicker component initialization.\n    if (!this.isDatepickerReady) {\n      this.picker.init\n        .pipe(\n          takeWhile(() => this.alive),\n          take(1),\n          tap(() => this.isDatepickerReady = true),\n          filter(() => !!this.queue),\n        )\n        .subscribe(() => {\n          this.writeValue(this.queue);\n          this.onChange(this.queue);\n          this.changeDetector.detectChanges();\n          this.queue = undefined;\n        });\n    }\n\n    this.picker.valueChange\n      .pipe(takeWhile(() => this.alive))\n      .subscribe((value: D) => {\n        this.writePicker(value);\n        this.writeInput(value);\n        this.onChange(value);\n\n        if (this.picker.shouldHide()) {\n          this.hidePicker();\n        }\n      });\n\n    merge(\n      this.picker.blur,\n      fromEvent(this.input, 'blur').pipe(\n        filter(() => !this.picker.isShown && this.document.activeElement !== this.input),\n      ),\n    ).pipe(\n      takeWhile(() => this.alive),\n      take(1),\n    ).subscribe(() => this.onTouched());\n  }\n\n  protected writePicker(value: D) {\n    this.picker.value = value;\n  }\n\n  protected writeInput(value: D) {\n    const stringRepresentation = this.datepickerAdapter.format(value, this.picker.format);\n    this.hostRef.nativeElement.value = stringRepresentation;\n  }\n\n  /**\n   * Validates if no datepicker adapter provided.\n   * */\n  protected noDatepickerAdapterProvided(): boolean {\n    return !this.datepickerAdapter || !(this.datepickerAdapter instanceof NbDatepickerAdapter);\n  }\n\n  protected subscribeOnInputChange() {\n    fromEvent(this.input, 'input')\n      .pipe(\n        map(() => this.inputValue),\n        takeWhile(() => this.alive),\n      )\n      .subscribe((value: string) => this.handleInputChange(value));\n  }\n\n  /**\n   * Parses input value and write if it isn't null.\n   * */\n  protected handleInputChange(value: string) {\n    const date = this.parseInputValue(value);\n\n    this.onChange(date);\n    this.writePicker(date);\n  }\n\n  protected parseInputValue(value): D | null {\n    if (this.datepickerAdapter.isValid(value, this.picker.format)) {\n      return this.datepickerAdapter.parse(value, this.picker.format);\n    }\n\n    return null;\n  }\n}\n"]}