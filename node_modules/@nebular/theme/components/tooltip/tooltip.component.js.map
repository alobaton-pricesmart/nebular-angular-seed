{"version":3,"file":"tooltip.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/tooltip/tooltip.component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;AAEH,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAE9D,OAAO,EAAE,UAAU,EAAyB,MAAM,QAAQ,CAAC;AAC3D,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAGjF;;;;;;;;;;;;;;;;GAgBG;AAwBH;IAvBA;QA4BE;;aAEK;QAEL,aAAQ,GAAe,UAAU,CAAC,GAAG,CAAC;QAatC,YAAO,GAAuC,EAAE,CAAC;IAWnD,CAAC;IArBC,sBAAI,uCAAO;aAAX;YACE,OAAU,IAAI,CAAC,QAAQ,SAAI,IAAI,CAAC,WAAa,CAAC;QAChD,CAAC;;;OAAA;IAGD,sBAAI,oCAAI;aAAR;YACE,OAAO,IAAI,CAAC;QACd,CAAC;;;OAAA;IAKD,sBAAI,2CAAW;aAAf;YACE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAI,IAAI,CAAC,OAAO,CAAC,MAAM,aAAU,CAAC,CAAC,CAAC,EAAE,CAAC;QACrE,CAAC;;;OAAA;IAED;;;OAGG;IACH,0CAAa,GAAb,cAAiB,CAAC;IA7BlB;QADC,KAAK,EAAE;;uDACQ;IAMhB;QADC,KAAK,EAAE;;wDAC8B;IAGtC;QADC,WAAW,CAAC,OAAO,CAAC;;;qDAGpB;IAGD;QADC,WAAW,CAAC,cAAc,CAAC;;;kDAG3B;IAGD;QADC,KAAK,EAAE;;uDACyC;IAtBtC,kBAAkB;QAvB9B,SAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE,CAAC,yBAAyB,CAAC;YACtC,QAAQ,EAAE,gNAMT;YACD,UAAU,EAAE;gBACV,OAAO,CAAC,aAAa,EAAE;oBACrB,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;oBAClC,UAAU,CAAC,WAAW,EAAE;wBACtB,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;wBACrB,OAAO,CAAC,GAAG,CAAC;qBACb,CAAC;oBACF,UAAU,CAAC,WAAW,EAAE;wBACtB,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;qBACpC,CAAC;iBACH,CAAC;aACH;SACF,CAAC;OACW,kBAAkB,CAiC9B;IAAD,yBAAC;CAAA,AAjCD,IAiCC;SAjCY,kBAAkB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, HostBinding, Input } from '@angular/core';\n\nimport { NbPosition, NbRenderableContainer } from '../cdk';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n\n/**\n * Tooltip container.\n * Renders provided tooltip inside.\n *\n * @styles\n *\n * tooltip-bg\n * tooltip-primary-bg\n * tooltip-info-bg\n * tooltip-success-bg\n * tooltip-warning-bg\n * tooltip-danger-bg\n * tooltip-fg\n * tooltip-shadow\n * tooltip-font-size\n *\n */\n@Component({\n  selector: 'nb-tooltip',\n  styleUrls: ['./tooltip.component.css'],\n  template: `\n    <span class=\"arrow\"></span>\n    <div class=\"content\">\n      <i *ngIf=\"context?.icon\" class=\"icon {{ context?.icon }}\"></i>\n      <span *ngIf=\"content\">{{ content }}</span>\n    </div>\n  `,\n  animations: [\n    trigger('showTooltip', [\n      state('in', style({ opacity: 1 })),\n      transition('void => *', [\n        style({ opacity: 0 }),\n        animate(100),\n      ]),\n      transition('* => void', [\n        animate(100, style({ opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\nexport class NbTooltipComponent implements NbRenderableContainer {\n\n  @Input()\n  content: string;\n\n  /**\n   * Popover position relatively host element.\n   * */\n  @Input()\n  position: NbPosition = NbPosition.TOP;\n\n  @HostBinding('class')\n  get binding() {\n    return `${this.position} ${this.statusClass}`;\n  }\n\n  @HostBinding('@showTooltip')\n  get show() {\n    return true;\n  }\n\n  @Input()\n  context: { icon?: string, status?: string } = {};\n\n  get statusClass() {\n    return this.context.status ? `${this.context.status}-tooltip` : '';\n  }\n\n  /**\n   * The method is empty since we don't need to do anything additionally\n   * render is handled by change detection\n   */\n  renderContent() {}\n}\n"]}