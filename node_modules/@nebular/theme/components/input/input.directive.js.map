{"version":3,"file":"input.directive.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/input/input.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Directive, Input, HostBinding } from '@angular/core';\nimport { convertToBoolProperty } from '../helpers';\n\n/**\n * Basic input directive.\n *\n * ```html\n * <input nbInput></input>\n * ```\n *\n * ### Installation\n *\n * Import `NbInputModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbInputModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Default input size is `medium`:\n * @stacked-example(Showcase, input/input-showcase.component)\n *\n * Inputs are available in multiple colors using `status` property:\n * @stacked-example(Input Colors, input/input-colors.component)\n *\n * There are three input sizes:\n *\n * @stacked-example(Input Sizes, input/input-sizes.component)\n *\n * Inputs available in different shapes, which could be combined with the other properties:\n * @stacked-example(Input Shapes, input/input-shapes.component)\n *\n * `nbInput` could be applied to the following selectors - `input`, `textarea`:\n * @stacked-example(Input Elements, input/input-types.component)\n *\n * You can add `fullWidth` attribute to make element fill container:\n * @stacked-example(Full width inputs, input/input-full-width.component)\n *\n * Or you can bind control with form controls or ngModel:\n * @stacked-example(Input form binding, input/input-form.component)\n *\n * @styles\n *\n * form-control-bg:\n * form-control-border-width:\n * form-control-border-type:\n * form-control-border-color:\n * form-control-text-primary-color:\n * form-control-focus-bg:\n * form-control-selected-border-color:\n * form-control-placeholder-font-size:\n * form-control-placeholder-color:\n * form-control-font-size:\n * form-control-padding:\n * form-control-font-size-sm:\n * form-control-padding-sm:\n * form-control-font-size-lg:\n * form-control-padding-lg:\n * form-control-border-radius:\n * form-control-semi-round-border-radius:\n * form-control-round-border-radius:\n * form-control-info-border-color:\n * form-control-success-border-color:\n * form-control-warning-border-color:\n * form-control-danger-border-color:\n */\n@Directive({\n  selector: 'input[nbInput],textarea[nbInput]',\n})\nexport class NbInputDirective {\n\n  static readonly SIZE_SMALL = 'small';\n  static readonly SIZE_MEDIUM = 'medium';\n  static readonly SIZE_LARGE = 'large';\n\n  static readonly STATUS_INFO = 'info';\n  static readonly STATUS_SUCCESS = 'success';\n  static readonly STATUS_WARNING = 'warning';\n  static readonly STATUS_DANGER = 'danger';\n\n  static readonly SHAPE_RECTANGLE = 'rectangle';\n  static readonly SHAPE_SEMI_ROUND = 'semi-round';\n  static readonly SHAPE_ROUND = 'round';\n\n  size: string = NbInputDirective.SIZE_MEDIUM;\n\n  /**\n   * Field size, available sizes:\n   * `small`, `medium`, `large`\n   * @param {string} val\n   */\n  @Input('fieldSize')\n  set setSize(value: string) {\n    this.size = value;\n  }\n\n  /**\n   * Field status (adds specific styles):\n   * `info`, `success`, `warning`, `danger`\n   * @param {string} val\n   */\n  @Input('status')\n  status: string;\n\n  /**\n   * Field shapes: `rectangle`, `round`, `semi-round`\n   * @param {string} val\n   */\n  @Input('shape')\n  shape: string = NbInputDirective.SHAPE_RECTANGLE;\n\n  /**\n   * If set element will fill container\n   * @param {string}\n   */\n  @Input('fullWidth')\n  set setFullWidth(value) {\n    this.fullWidth = convertToBoolProperty(value);\n  }\n\n  @HostBinding('class.input-full-width')\n  fullWidth = false;\n\n  @HostBinding('class.input-sm')\n  get small() {\n    return this.size === NbInputDirective.SIZE_SMALL;\n  }\n\n  @HostBinding('class.input-md')\n  get medium() {\n    return this.size === NbInputDirective.SIZE_MEDIUM;\n  }\n\n  @HostBinding('class.input-lg')\n  get large() {\n    return this.size === NbInputDirective.SIZE_LARGE;\n  }\n\n  @HostBinding('class.input-info')\n  get info() {\n    return this.status === NbInputDirective.STATUS_INFO;\n  }\n\n  @HostBinding('class.input-success')\n  get success() {\n    return this.status === NbInputDirective.STATUS_SUCCESS;\n  }\n\n  @HostBinding('class.input-warning')\n  get warning() {\n    return this.status === NbInputDirective.STATUS_WARNING;\n  }\n\n  @HostBinding('class.input-danger')\n  get danger() {\n    return this.status === NbInputDirective.STATUS_DANGER;\n  }\n\n  @HostBinding('class.input-rectangle')\n  get rectangle() {\n    return this.shape === NbInputDirective.SHAPE_RECTANGLE;\n  }\n\n  @HostBinding('class.input-semi-round')\n  get semiRound() {\n    return this.shape === NbInputDirective.SHAPE_SEMI_ROUND;\n  }\n\n  @HostBinding('class.input-round')\n  get round() {\n    return this.shape === NbInputDirective.SHAPE_ROUND;\n  }\n}\n"]}