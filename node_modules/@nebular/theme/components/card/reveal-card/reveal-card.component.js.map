{"version":3,"file":"reveal-card.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/card/reveal-card/reveal-card.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqDG;AAcH;IAbA;QAcE;;;WAGG;QAGH,aAAQ,GAAY,KAAK,CAAC;QAE1B;;;WAGG;QACM,qBAAgB,GAAG,IAAI,CAAC;IAKnC,CAAC;IAHC,sCAAM,GAAN;QACE,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACjC,CAAC;IAVD;QAFC,KAAK,EAAE;QACP,WAAW,CAAC,gBAAgB,CAAC;;2DACJ;IAMjB;QAAR,KAAK,EAAE;;mEAAyB;IAbtB,qBAAqB;QAbjC,SAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE,CAAC,6BAA6B,CAAC;YAC1C,QAAQ,EAAE,yUAQT;SACF,CAAC;OACW,qBAAqB,CAkBjC;IAAD,4BAAC;CAAA,AAlBD,IAkBC;SAlBY,qBAAqB","sourcesContent":["import { Component, Input, HostBinding } from '@angular/core';\n\n/**\n *\n * Reveal card example:\n * @stacked-example(My example, reveal-card/reveal-card-showcase.component)\n *\n * As a content Reveal card accepts two instances of `nb-card` - for front and back sides.\n *\n * Basic reveal card configuration:\n *\n * ```html\n * <nb-reveal-card>\n *   <nb-card-front>\n *     <nb-card>\n *       <nb-card-body>\n *         Front\n *       </nb-card-body>\n *     </nb-card>\n *   </nb-card-front>\n *   <nb-card-back>\n *     <nb-card>\n *       <nb-card-body>\n *         Back\n *       </nb-card-body>\n *     </nb-card>\n *   </nb-card-back>\n * </nb-reveal-card>\n * ```\n *\n * ### Installation\n *\n * Import `NbCardModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbCardModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Reveal Card with header and footer:\n * @stacked-example(With Header & Footer, reveal-card/reveal-card-full.component)\n *\n * Colored reveal-cards could be simply configured by providing a `status` property:\n * @stacked-example(Colored Card, reveal-card/reveal-card-colors.component)\n *\n * It is also possible to assign an `accent` property for a slight card highlight\n * as well as combine it with `status`:\n * @stacked-example(Accent Card, reveal-card/reveal-card-accents.component)\n *\n * @additional-example(Multiple Sizes, reveal-card/reveal-card-sizes.component)\n */\n@Component({\n  selector: 'nb-reveal-card',\n  styleUrls: ['./reveal-card.component.css'],\n  template: `\n    <ng-content select=\"nb-card-front\"></ng-content>\n    <div class=\"second-card-container\">\n      <ng-content select=\"nb-card-back\"></ng-content>\n    </div>\n    <a *ngIf=\"showToggleButton\" class=\"reveal-button\" (click)=\"toggle()\">\n      <i class=\"nb-arrow-dropdown\" aria-hidden=\"true\"></i>\n    </a>\n  `,\n})\nexport class NbRevealCardComponent {\n  /**\n   * Reveal state\n   * @type boolean\n   */\n  @Input()\n  @HostBinding('class.revealed')\n  revealed: boolean = false;\n\n  /**\n   * Show/hide toggle button to be able to control toggle from your code\n   * @type {boolean}\n   */\n  @Input() showToggleButton = true;\n\n  toggle() {\n    this.revealed = !this.revealed;\n  }\n}\n"]}