{"version":3,"file":"flip-card.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/card/flip-card/flip-card.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AAqBH;IApBA;QAqBE;;;WAGG;QAGH,YAAO,GAAY,KAAK,CAAC;QAEzB;;;WAGG;QACM,qBAAgB,GAAG,IAAI,CAAC;IAKnC,CAAC;IAHC,oCAAM,GAAN;QACE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/B,CAAC;IAVD;QAFC,KAAK,EAAE;QACP,WAAW,CAAC,eAAe,CAAC;;wDACJ;IAMhB;QAAR,KAAK,EAAE;;iEAAyB;IAbtB,mBAAmB;QApB/B,SAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE,CAAC,2BAA2B,CAAC;YACxC,QAAQ,EAAE,+lBAeT;SACF,CAAC;OACW,mBAAmB,CAkB/B;IAAD,0BAAC;CAAA,AAlBD,IAkBC;SAlBY,mBAAmB","sourcesContent":["import { Component, Input, HostBinding } from '@angular/core';\n\n/**\n *\n * Flip card example:\n * @stacked-example(Showcase, flip-card/flip-card-showcase.component)\n *\n * As a content Flip card accepts two instances of `nb-card` - for front and back sides.\n *\n * Basic flip card configuration:\n *\n * ```html\n * <nb-flip-card>\n *   <nb-card-front>\n *     <nb-card>\n *       <nb-card-body>\n *         Front\n *       </nb-card-body>\n *     </nb-card>\n *   </nb-card-front>\n *   <nb-card-back>\n *     <nb-card>\n *       <nb-card-body>\n *         Back\n *       </nb-card-body>\n *     </nb-card>\n *   </nb-card-back>\n * </nb-flip-card>\n * ```\n *\n * ### Installation\n *\n * Import `NbCardModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbCardModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Flip Card with header and footer:\n * @stacked-example(With Header & Footer, flip-card/flip-card-full.component.ts)\n *\n * Colored flip-cards could be simply configured by providing a `status` property:\n * @stacked-example(Colored Card, flip-card/flip-card-colors.component)\n *\n * It is also possible to assign an `accent` property for a slight card highlight\n * as well as combine it with `status`:\n * @stacked-example(Accent Card, flip-card/flip-card-accents.component)\n *\n * @additional-example(Multiple Sizes, flip-card/flip-card-sizes.component)\n *\n */\n@Component({\n  selector: 'nb-flip-card',\n  styleUrls: ['./flip-card.component.css'],\n  template: `\n    <div class=\"flipcard-body\">\n      <div class=\"front-container\">\n        <ng-content select=\"nb-card-front\"></ng-content>\n        <a *ngIf=\"showToggleButton\" class=\"flip-button\" (click)=\"toggle()\">\n          <i class=\"nb-arrow-dropleft\" aria-hidden=\"true\"></i>\n        </a>\n      </div>\n      <div class=\"back-container\">\n        <ng-content select=\"nb-card-back\"></ng-content>\n        <a *ngIf=\"showToggleButton\" class=\"flip-button\" (click)=\"toggle()\">\n          <i class=\"nb-arrow-dropleft\" aria-hidden=\"true\"></i>\n        </a>\n      </div>\n    </div>\n  `,\n})\nexport class NbFlipCardComponent {\n  /**\n   * Flip state\n   * @type boolean\n   */\n  @Input()\n  @HostBinding('class.flipped')\n  flipped: boolean = false;\n\n  /**\n   * Show/hide toggle button to be able to control toggle from your code\n   * @type {boolean}\n   */\n  @Input() showToggleButton = true;\n\n  toggle() {\n    this.flipped = !this.flipped;\n  }\n}\n"]}