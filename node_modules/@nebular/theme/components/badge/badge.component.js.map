{"version":3,"file":"badge.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/badge/badge.component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;AAEH,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,wBAAwB,EAAE,MAAM,kCAAkC,CAAC;AAE5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AAQH;IA4DE,0BAAoB,sBAAgD;QAAhD,2BAAsB,GAAtB,sBAAsB,CAA0B;QA3CpE,eAAU,GAAW,kBAAgB,CAAC,cAAc,CAAC;QAErD;;;WAGG;QACM,SAAI,GAAW,EAAE,CAAC;IAqC4C,CAAC;yBA5D7D,gBAAgB;IAyClB,sBAAI,oCAAM;QANnB;;;;;WAKG;aACM,UAAW,KAAK;YACvB,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACzB;QACH,CAAC;;;OAAA;IAED,sBAAI,2CAAa;aAAjB;YACE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,OAAO,kBAAgB,CAAC,SAAS,CAAC;aACnC;YAED,IAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;YAClD,IAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YAC5C,IAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;YAC1C,OAAO,IAAI,CAAC,QAAQ;iBACjB,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC;iBAChC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAClC,CAAC;;;OAAA;;IAzDe,yBAAQ,GAAG,UAAU,CAAC;IACtB,0BAAS,GAAG,WAAW,CAAC;IACxB,4BAAW,GAAG,aAAa,CAAC;IAC5B,6BAAY,GAAG,cAAc,CAAC;IAE9B,0BAAS,GAAG,WAAW,CAAC;IACxB,wBAAO,GAAG,SAAS,CAAC;IACpB,6BAAY,GAAG,cAAc,CAAC;IAC9B,2BAAU,GAAG,YAAY,CAAC;IAE1B,+BAAc,GAAG,SAAS,CAAC;IAC3B,4BAAW,GAAG,MAAM,CAAC;IACrB,+BAAc,GAAG,SAAS,CAAC;IAC3B,+BAAc,GAAG,SAAS,CAAC;IAC3B,8BAAa,GAAG,QAAQ,CAAC;IAQhC;QAAR,KAAK,EAAE;;kDAAmB;IAUlB;QAAR,KAAK,EAAE;;sDAAkB;IAQjB;QAAR,KAAK,EAAE;;;kDAIP;IA7CU,gBAAgB;QAP5B,SAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,CAAC,uBAAuB,CAAC;YACpC,QAAQ,EAAE,8FAET;SACF,CAAC;yCA6D4C,wBAAwB;OA5DzD,gBAAgB,CA6D5B;IAAD,uBAAC;CAAA,AA7DD,IA6DC;SA7DY,gBAAgB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, Input } from '@angular/core';\nimport { NbLayoutDirectionService } from '../../services/direction.service';\n\n/**\n * Badge is a simple labeling component.\n * It can be used to add additional information to any content or highlight unread items.\n *\n * Element is absolute positioned, so parent should be\n * [positioned element](https://developer.mozilla.org/en-US/docs/Web/CSS/position).\n * It means parent `position` should be set to anything except `static`, e.g. `relative`,\n * `absolute`, `fixed`, or `sticky`.\n *\n * ### Installation\n *\n * Import `NbBadgeModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbBadgeModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Badge with default position and status(color):\n *\n * ```html\n * <nb-badge text=\"badgeText\"></nb-badge>\n * ```\n *\n * For example, badge can be placed into nb-card header:\n * @stacked-example(Showcase, badge/badge-showcase.component)\n *\n * Badge located on the bottom right with warning status:\n *\n * ```html\n * <nb-badge text=\"badgeText\" status=\"warning\" position=\"bottom right\">\n * </nb-badge>\n * ```\n *\n * @styles\n *\n * badge-fg-text:\n * badge-primary-bg-color:\n * badge-success-bg-color:\n * badge-info-bg-color:\n * badge-warning-bg-color:\n * badge-danger-bg-color:\n */\n@Component({\n  selector: 'nb-badge',\n  styleUrls: ['./badge.component.css'],\n  template: `\n    <span class=\"nb-badge {{positionClass}} nb-badge-{{colorClass}}\">{{text}}</span>\n  `,\n})\nexport class NbBadgeComponent {\n  static readonly TOP_LEFT = 'top left';\n  static readonly TOP_RIGHT = 'top right';\n  static readonly BOTTOM_LEFT = 'bottom left';\n  static readonly BOTTOM_RIGHT = 'bottom right';\n\n  static readonly TOP_START = 'top start';\n  static readonly TOP_END = 'top end';\n  static readonly BOTTOM_START = 'bottom start';\n  static readonly BOTTOM_END = 'bottom end';\n\n  static readonly STATUS_PRIMARY = 'primary';\n  static readonly STATUS_INFO = 'info';\n  static readonly STATUS_SUCCESS = 'success';\n  static readonly STATUS_WARNING = 'warning';\n  static readonly STATUS_DANGER = 'danger';\n\n  colorClass: string = NbBadgeComponent.STATUS_PRIMARY;\n\n  /**\n   * Text to display\n   * @type string\n   */\n  @Input() text: string = '';\n\n  /**\n   * Badge position\n   *\n   * Can be set to any class or to one of predefined positions:\n   * 'top left', 'top right', 'bottom left', 'bottom right',\n   * 'top start', 'top end', 'bottom start', 'bottom end'\n   * @type string\n   */\n  @Input() position: string;\n\n  /**\n   * Badge status (adds specific styles):\n   * 'primary', 'info', 'success', 'warning', 'danger'\n   * @param {string} val\n   * @type string\n   */\n  @Input() set status(value) {\n    if (value) {\n      this.colorClass = value;\n    }\n  }\n\n  get positionClass() {\n    if (!this.position) {\n      return NbBadgeComponent.TOP_RIGHT;\n    }\n\n    const isLtr = this.layoutDirectionService.isLtr();\n    const startValue = isLtr ? 'left' : 'right';\n    const endValue = isLtr ? 'right' : 'left';\n    return this.position\n      .replace(/\\bstart\\b/, startValue)\n      .replace(/\\bend\\b/, endValue);\n  }\n\n  constructor(private layoutDirectionService: NbLayoutDirectionService) {}\n}\n"]}