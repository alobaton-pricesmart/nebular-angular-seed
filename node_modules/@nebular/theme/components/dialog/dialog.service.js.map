{"version":3,"file":"dialog.service.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/dialog/dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { ComponentFactoryResolver, Inject, Injectable, Injector, TemplateRef, Type } from '@angular/core';\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport {\n  NbComponentPortal,\n  NbGlobalPositionStrategy,\n  NbOverlayRef,\n  NbOverlayService,\n  NbPortalInjector,\n  NbPositionBuilderService,\n  NbScrollStrategy,\n  NbTemplatePortal,\n} from '../cdk';\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { NB_DIALOG_CONFIG, NbDialogConfig } from './dialog-config';\nimport { NbDialogRef } from './dialog-ref';\nimport { NbDialogContainerComponent } from './dialog-container';\n\n\n/**\n * The `NbDialogService` helps to open dialogs.\n *\n * @stacked-example(Showcase, dialog/dialog-showcase.component)\n *\n * A new dialog is opened by calling the `open` method with a component to be loaded and an optional configuration.\n * `open` method will return `NbDialogRef` that can be used for the further manipulations.\n *\n * ### Installation\n *\n * Import `NbDialogModule.forRoot()` to your app module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDialogModule.forRoot(config),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * If you are using it in a lazy loaded module than you have to install it with `NbDialogModule.forChild()`:\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbDialogModule.forChild(config),\n *   ],\n * })\n * export class LazyLoadedModule { }\n * ```\n *\n * ### Usage\n *\n * ```ts\n * const dialogRef = this.dialogService.open(MyDialogComponent, { ... });\n * ```\n *\n * `NbDialogRef` gives capability access reference to the rendered dialog component,\n * destroy dialog and some other options described below.\n *\n * Also, you can inject `NbDialogRef` in dialog component.\n *\n * ```ts\n * this.dialogService.open(MyDialogComponent, { ... });\n *\n * // my-dialog.component.ts\n * constructor(protected dialogRef: NbDialogRef) {\n * }\n *\n * close() {\n *   this.dialogRef.close();\n * }\n * ```\n *\n * Instead of component you can create dialog from TemplateRef:\n *\n * @stacked-example(Template ref, dialog/dialog-template.component)\n *\n * The dialog may return result through `NbDialogRef`. Calling component can receive this result with `onClose`\n * stream of `NbDialogRef`.\n *\n * @stacked-example(Result, dialog/dialog-result.component)\n *\n * ### Configuration\n *\n * As we mentioned above, `open` method of the `NbDialogService` may receive optional configuration options.\n * Also, you can provide global dialogs configuration through `NbDialogModule.forRoot({ ... })`.\n *\n * This config may contain the following:\n *\n * `context` - both, template and component may receive data through `config.context` property.\n * For components, this data will be assigned through inputs.\n * For templates, you can access it inside template as $implicit.\n *\n * ```ts\n * this.dialogService.open(template, { context: 'pass data in template' });\n * ```\n *\n * ```html\n * <ng-template let-some-additional-data>\n *   {{ some-additional-data }}\n * <ng-template/>\n * ```\n *\n * `hasBackdrop` - determines is service have to render backdrop under the dialog.\n * Default is true.\n * @stacked-example(Backdrop, dialog/dialog-has-backdrop.component)\n *\n * `closeOnBackdropClick` - close dialog on backdrop click if true.\n * Default is true.\n * @stacked-example(Backdrop click, dialog/dialog-backdrop-click.component)\n *\n * `closeOnEsc` - close dialog on escape button on the keyboard.\n * Default is true.\n * @stacked-example(Escape hit, dialog/dialog-esc.component)\n *\n * `hasScroll` - Disables scroll on content under dialog if true and does nothing otherwise.\n * Default is false.\n * Please, open dialogs in the separate window and try to scroll.\n * @stacked-example(Scroll, dialog/dialog-scroll.component)\n *\n * `autoFocus` - Focuses dialog automatically after open if true. It's useful to prevent misclicks on\n * trigger elements and opening multiple dialogs.\n * Default is true.\n *\n * As you can see, if you open dialog with auto focus dialog will focus first focusable element\n * or just blur previously focused automatically.\n * Otherwise, without auto focus, the focus will stay on the previously focused element.\n * Please, open dialogs in the separate window and try to click on the button without focus\n * and then hit space any times. Multiple same dialogs will be opened.\n * @stacked-example(Auto focus, dialog/dialog-auto-focus.component)\n * */\n@Injectable()\nexport class NbDialogService {\n  constructor(@Inject(NB_DOCUMENT) protected document,\n              @Inject(NB_DIALOG_CONFIG) protected globalConfig,\n              protected positionBuilder: NbPositionBuilderService,\n              protected overlay: NbOverlayService,\n              protected injector: Injector,\n              protected cfr: ComponentFactoryResolver) {\n  }\n\n  /**\n   * Opens new instance of the dialog, may receive optional config.\n   * */\n  open<T>(content: Type<T> | TemplateRef<T>,\n          userConfig: Partial<NbDialogConfig<Partial<T> | string>> = {}): NbDialogRef<T> {\n    const config = new NbDialogConfig({ ...this.globalConfig, ...userConfig });\n    const overlayRef = this.createOverlay(config);\n    const dialogRef = new NbDialogRef<T>(overlayRef);\n    const container = this.createContainer(config, overlayRef);\n    this.createContent(config, content, container, dialogRef);\n\n    this.registerCloseListeners(config, overlayRef, dialogRef);\n\n    return dialogRef;\n  }\n\n  protected createOverlay(config: NbDialogConfig): NbOverlayRef {\n    const positionStrategy = this.createPositionStrategy();\n    const scrollStrategy = this.createScrollStrategy(config.hasScroll);\n\n    return this.overlay.create({\n      positionStrategy,\n      scrollStrategy,\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n    });\n  }\n\n  protected createPositionStrategy(): NbGlobalPositionStrategy {\n    return this.positionBuilder\n      .global()\n      .centerVertically()\n      .centerHorizontally();\n  }\n\n  protected createScrollStrategy(hasScroll: boolean): NbScrollStrategy {\n    if (hasScroll) {\n      return this.overlay.scrollStrategies.noop();\n    } else {\n      return this.overlay.scrollStrategies.block();\n    }\n  }\n\n  protected createContainer(config: NbDialogConfig, overlayRef: NbOverlayRef): NbDialogContainerComponent {\n    const injector = new NbPortalInjector(this.createInjector(config), new WeakMap([[NbDialogConfig, config]]));\n    const containerPortal = new NbComponentPortal(NbDialogContainerComponent, null, injector, this.cfr);\n    const containerRef = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  protected createContent<T>(config: NbDialogConfig,\n                             content: Type<T> | TemplateRef<T>,\n                             container: NbDialogContainerComponent,\n                             dialogRef: NbDialogRef<T>) {\n    if (content instanceof TemplateRef) {\n      const portal = this.createTemplatePortal(config, content, dialogRef);\n      container.attachTemplatePortal(portal);\n    } else {\n      const portal = this.createComponentPortal(config, content, dialogRef);\n      dialogRef.componentRef = container.attachComponentPortal(portal);\n\n      if (config.context) {\n        Object.assign(dialogRef.componentRef.instance, { ...config.context })\n      }\n    }\n  }\n\n  protected createTemplatePortal<T>(config: NbDialogConfig,\n                                    content: TemplateRef<T>,\n                                    dialogRef: NbDialogRef<T>): NbTemplatePortal {\n    return new NbTemplatePortal(content, null, <any>{ $implicit: config.context, dialogRef });\n  }\n\n  /**\n   * We're creating portal with custom injector provided through config or using global injector.\n   * This approach provides us capability inject `NbDialogRef` in dialog component.\n   * */\n  protected createComponentPortal<T>(config: NbDialogConfig,\n                                     content: Type<T>,\n                                     dialogRef: NbDialogRef<T>): NbComponentPortal {\n    const injector = this.createInjector(config);\n    const portalInjector = new NbPortalInjector(injector, new WeakMap([[NbDialogRef, dialogRef]]));\n    return new NbComponentPortal(content, config.viewContainerRef, portalInjector);\n  }\n\n  protected createInjector(config: NbDialogConfig): Injector {\n    return config.viewContainerRef && config.viewContainerRef.injector || this.injector;\n  }\n\n  protected registerCloseListeners<T>(config: NbDialogConfig, overlayRef: NbOverlayRef, dialogRef: NbDialogRef<T>) {\n    if (config.closeOnBackdropClick) {\n      overlayRef.backdropClick().subscribe(() => dialogRef.close());\n    }\n\n    if (config.closeOnEsc) {\n      observableFromEvent(this.document, 'keyup')\n        .pipe(filter((event: KeyboardEvent) => event.keyCode === 27))\n        .subscribe(() => dialogRef.close());\n    }\n  }\n}\n"]}