{"version":3,"file":"calendar-day-picker.component.js","sourceRoot":"","sources":["../../../../../../../.ng_build/theme/components/calendar-kit/components/calendar-day-picker/calendar-day-picker.component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;AAEH,OAAO,EACL,uBAAuB,EACvB,SAAS,EACT,YAAY,EACZ,WAAW,EACX,KAAK,EAEL,MAAM,EAEN,IAAI,GACL,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,2BAA2B,EAAE,MAAM,gBAAgB,CAAC;AAC7D,OAAO,EAAE,0BAA0B,EAAE,MAAM,+BAA+B,CAAC;AAC3E,OAAO,EAAkB,cAAc,EAAE,MAAM,aAAa,CAAC;AAG7D;;KAEK;AAmBL;IAwEE,sCAAoB,UAA0C;QAA1C,eAAU,GAAV,UAAU,CAAgC;QAjE9D;;;aAGK;QACI,mBAAc,GAAY,IAAI,CAAC;QA0BxC,kBAAa,GAAmC,0BAA0B,CAAC;QAE3E;;;aAGK;QACI,SAAI,GAAmB,cAAc,CAAC,MAAM,CAAC;QAOtD;;aAEK;QACK,eAAU,GAAG,IAAI,YAAY,EAAK,CAAC;IAoB7C,CAAC;IAzCD,sBAAI,0DAAgB;QAJpB;;aAEK;aAEL,UAAqB,aAAyC;YAC5D,IAAI,aAAa,EAAE;gBACjB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;aACpC;QACH,CAAC;;;OAAA;IAoBD,sBAAI,gDAAM;aAAV;YACE,OAAO,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,MAAM,CAAC;QAC7C,CAAC;;;OAAA;IAGD,sBAAI,+CAAK;aAAT;YACE,OAAO,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,KAAK,CAAC;QAC5C,CAAC;;;OAAA;IAYD,kDAAW,GAAX,UAAY,EAA8B;YAA5B,4BAAW;QACvB,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;SACpF;IACH,CAAC;IAED,+CAAQ,GAAR,UAAS,GAAM;QACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IA9EQ;QAAR,KAAK,EAAE;;qEAAgB;IAMf;QAAR,KAAK,EAAE;;wEAAgC;IAK/B;QAAR,KAAK,EAAE;;6DAAQ;IAKP;QAAR,KAAK,EAAE;;6DAAQ;IAKP;QAAR,KAAK,EAAE;;gEAAwB;IAMhC;QADC,KAAK,CAAC,eAAe,CAAC;kCACa,IAAI;yCAAJ,IAAI;wEAIvC;IAOQ;QAAR,KAAK,EAAE;;8DAA8C;IAK7C;QAAR,KAAK,EAAE;;8DAAS;IAKP;QAAT,MAAM,EAAE;;oEAAoC;IAG7C;QADC,WAAW,CAAC,cAAc,CAAC;;;8DAG3B;IAGD;QADC,WAAW,CAAC,aAAa,CAAC;;;6DAG1B;IA/DU,4BAA4B;QAlBxC,SAAS,CAAC;YACT,QAAQ,EAAE,wBAAwB;YAClC,MAAM,EAAE,CAAC,6BAA6B,CAAC;YACvC,QAAQ,EAAE,kWAYT;YACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;yCAyEgC,2BAA2B;OAxEhD,4BAA4B,CAoFxC;IAAD,mCAAC;CAAA,AApFD,IAoFC;SApFY,4BAA4B","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  Type,\n} from '@angular/core';\n\nimport { NbCalendarMonthModelService } from '../../services';\nimport { NbCalendarDayCellComponent } from './calendar-day-cell.component';\nimport { NbCalendarCell, NbCalendarSize } from '../../model';\n\n\n/**\n * Provides capability pick days.\n * */\n@Component({\n  selector: 'nb-calendar-day-picker',\n  styles: [` :host { display: block; } `],\n  template: `\n    <nb-calendar-days-names></nb-calendar-days-names>\n    <nb-calendar-picker\n      [data]=\"weeks\"\n      [visibleDate]=\"visibleDate\"\n      [selectedValue]=\"date\"\n      [cellComponent]=\"cellComponent\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [filter]=\"filter\"\n      (select)=\"onSelect($event)\">\n    </nb-calendar-picker>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbCalendarDayPickerComponent<D, T> implements OnChanges {\n\n  /**\n   * Describes which month picker have to render.\n   * */\n  @Input() visibleDate: D;\n\n  /**\n   * Defines if we should render previous and next months\n   * in the current month view.\n   * */\n  @Input() boundingMonths: boolean = true;\n\n  /**\n   * Minimum available date for selection.\n   * */\n  @Input() min: D;\n\n  /**\n   * Maximum available date for selection.\n   * */\n  @Input() max: D;\n\n  /**\n   * Predicate that decides which cells will be disabled.\n   * */\n  @Input() filter: (D) => boolean;\n\n  /**\n   * Custom day cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  @Input('cellComponent')\n  set setCellComponent(cellComponent: Type<NbCalendarCell<D, T>>) {\n    if (cellComponent) {\n      this.cellComponent = cellComponent;\n    }\n  }\n  cellComponent: Type<NbCalendarCell<any, any>> = NbCalendarDayCellComponent;\n\n  /**\n   * Size of the component.\n   * Can be 'medium' which is default or 'large'.\n   * */\n  @Input() size: NbCalendarSize = NbCalendarSize.MEDIUM;\n\n  /**\n   * Already selected date.\n   * */\n  @Input() date: T;\n\n  /**\n   * Fires newly selected date.\n   * */\n  @Output() dateChange = new EventEmitter<D>();\n\n  @HostBinding('class.medium')\n  get medium() {\n    return this.size === NbCalendarSize.MEDIUM;\n  }\n\n  @HostBinding('class.large')\n  get large() {\n    return this.size === NbCalendarSize.LARGE;\n  }\n\n  /**\n   * Day picker model.\n   * Provides all days in current month and if boundingMonth is true some days\n   * from previous and next one.\n   * */\n  weeks: D[][];\n\n  constructor(private monthModel: NbCalendarMonthModelService<D>) {\n  }\n\n  ngOnChanges({ visibleDate }: SimpleChanges) {\n    if (visibleDate) {\n      this.weeks = this.monthModel.createDaysGrid(this.visibleDate, this.boundingMonths);\n    }\n  }\n\n  onSelect(day: D) {\n    this.dateChange.emit(day);\n  }\n}\n"]}