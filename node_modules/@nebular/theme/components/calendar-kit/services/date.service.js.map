{"version":3,"file":"date.service.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/calendar-kit/services/date.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAKH;IAAA;QACW,iBAAY,GAAW,CAAC,CAAC;IA2KpC,CAAC;IAvKC,iCAAS,GAAT,UAAU,MAAW;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;SAEK;IACL,iCAAS,GAAT,UAAU,IAAO,EAAE,KAAQ,EAAE,GAAM;QACjC,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAChF,CAAC;IAAA,CAAC;IAEF;;SAEK;IACL,qCAAa,GAAb,UAAc,KAAQ,EAAE,KAAQ;QAC9B,OAAO,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC;IAAA,CAAC;IAEF;;SAEK;IACL,uCAAe,GAAf,UAAgB,KAAQ,EAAE,KAAQ;QAChC,OAAO,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;SAEK;IACL,sCAAc,GAAd,UAAe,KAAQ,EAAE,KAAQ;QAC/B,OAAO,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IAyIH,oBAAC;AAAD,CAAC,AA5KD,IA4KC","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { TranslationWidth } from '@angular/common';\n\n\nexport abstract class NbDateService<D> {\n  readonly DAYS_IN_WEEK: number = 7;\n\n  protected locale: string;\n\n  setLocale(locale: any) {\n    this.locale = locale;\n  }\n\n  /**\n   * Checks if the date is between the start date and the end date.\n   * */\n  isBetween(date: D, start: D, end: D): boolean {\n    return this.compareDates(date, start) > 0 && this.compareDates(date, end) < 0;\n  };\n\n  /**\n   * Checks is two dates have the same day.\n   * */\n  isSameDaySafe(date1: D, date2: D): boolean {\n    return date1 && date2 && this.isSameDay(date1, date2);\n  };\n\n  /**\n   * Checks is two dates have the same month.\n   * */\n  isSameMonthSafe(date1: D, date2: D): boolean {\n    return date1 && date2 && this.isSameMonth(date1, date2);\n  }\n\n  /**\n   * Checks is two dates have the same year.\n   * */\n  isSameYearSafe(date1: D, date2: D): boolean {\n    return date1 && date2 && this.isSameYear(date1, date2);\n  }\n\n  /**\n   * Returns true if date string is valid date string according to the provided format.\n   * */\n  abstract isValidDateString(date: string, format: string): boolean;\n\n  /**\n   * Returns today date.\n   * */\n  abstract today(): D;\n\n  /**\n   * Gets the date of the month component of the given date.\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the year component of the given date.\n   * */\n  abstract getYear(date: D): number;\n\n  /**\n   * Returns day of the week of the given date.\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Returns first day of the week, it can be 1 if week starts from monday\n   * and 0 if from sunday and so on.\n   * */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Returns localized month name by date and style.\n   * */\n  abstract getMonthName(date: D, style?: TranslationWidth): string;\n\n  /**\n   * Returns localized month name by month index and style.\n   * */\n  abstract getMonthNameByIndex(month: number, style?: TranslationWidth): string;\n\n  /**\n   * Returns localized days names.\n   * */\n  abstract getDayOfWeekNames(style?: TranslationWidth): string[];\n\n  /**\n   * Parses the date string according to the passed format.\n   * */\n  abstract parse(date: string, format: string): D;\n\n  /**\n   * Transforms the date to the string according to the passed format.\n   * */\n  abstract format(date: D, format: string): string;\n\n  /**\n   * Creates new date from year, month and date.\n   * */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Checks is two dates have the same year.\n   * */\n  abstract isSameYear(date1: D, date2: D): boolean;\n\n  /**\n   * Checks is two dates have the same month.\n   * */\n  abstract isSameMonth(date1: D, date2: D): boolean;\n\n  /**\n   * Checks is two dates have the same day.\n   * */\n  abstract isSameDay(date1: D, date2: D): boolean;\n\n  /**\n   * Compares two dates.\n   * Returns 0 if dates are the same.\n   * Returns 1 if the first date is greater than the second.\n   * Returns -1 if the second date is greater than the first.\n   * */\n  abstract compareDates(date1: D, date2: D): number;\n\n  /**\n   * Clones passed date.\n   * */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates the same date but with day equals to 1.\n   * */\n  abstract getMonthStart(date: D): D;\n\n  /**\n   * Creates the same date but with day equals to the last day in this month.\n   * */\n  abstract getMonthEnd(date: D): D;\n\n  /**\n   * Creates the same date but with month equals to 0 and day equals to 1.\n   * */\n  abstract getYearStart(date: D): D;\n\n  /**\n   * Creates the same date but with month equals to 11 and day equals to 31.\n   * */\n  abstract getYearEnd(date: D): D;\n\n  /**\n   * Returns number of days in the date.\n   * */\n  abstract getNumberOfDaysInMonth(date: D): number;\n\n  /**\n   * Returns date with added number of days.\n   * */\n  abstract addDay(date: D, days: number): D;\n\n  /**\n   * Returns date with added number of months.\n   * */\n  abstract addMonth(date: D, months: number): D;\n\n  /**\n   * Returns date with added number of years.\n   * */\n  abstract addYear(date: D, years: number): D;\n\n  abstract getId(): string;\n}\n"]}