{"version":3,"file":"viewport-ruler-adapter.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/cdk/adapter/viewport-ruler-adapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAE,qBAAqB,EAAoB,MAAM,kCAAkC,CAAC;AAI3F;IAA4C,0CAAa;IACvD,gCAAY,QAAoB,EAAE,MAAc,EAC1B,KAA2B,EAC3B,MAA6B;QAFnD,YAGE,kBAAM,QAAQ,EAAE,MAAM,CAAC,SACxB;QAHqB,WAAK,GAAL,KAAK,CAAsB;QAC3B,YAAM,GAAN,MAAM,CAAuB;;IAEnD,CAAC;IAED,gDAAe,GAAf;QACE,IAAI,GAAG,CAAC;QACR;;;YAGI;QACJ,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;aACvB,IAAI,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,CAAC,YAAY,EAAE,CAAC,EAApE,CAAoE,CAAC,CAAC;aAC7F,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,GAAG,GAAG,IAAI,EAAV,CAAU,CAAC,CAAC;QACjC,OAAO,GAAG,CAAC;IACb,CAAC;IAED,0DAAyB,GAAzB;QACE,IAAI,GAAG,CAAC;QACR;;;YAGI;QACJ,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;aACtB,IAAI,CAAC,GAAG,CAAC,UAAC,QAA0B,IAAK,OAAA,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAvC,CAAuC,CAAC,CAAC;aAClF,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,GAAG,GAAG,QAAQ,EAAd,CAAc,CAAC,CAAC;QACzC,OAAO,GAAG,CAAC;IACb,CAAC;IA7BU,sBAAsB;QADlC,UAAU,EAAE;yCAEW,UAAU,EAAU,MAAM;YACnB,oBAAoB;YACnB,qBAAqB;OAHxC,sBAAsB,CA8BlC;IAAD,6BAAC;CAAA,AA9BD,CAA4C,aAAa,GA8BxD;SA9BY,sBAAsB","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { map } from 'rxjs/operators';\n\nimport { NbPlatform } from '../overlay/mapping';\nimport { NbLayoutRulerService } from '../../../services/ruler.service';\nimport { NbLayoutScrollService, NbScrollPosition } from '../../../services/scroll.service';\n\n\n@Injectable()\nexport class NbViewportRulerAdapter extends ViewportRuler {\n  constructor(platform: NbPlatform, ngZone: NgZone,\n              protected ruler: NbLayoutRulerService,\n              protected scroll: NbLayoutScrollService) {\n    super(platform, ngZone);\n  }\n\n  getViewportSize(): Readonly<{ width: number; height: number; }> {\n    let res;\n    /*\n    * getDimensions call is really synchronous operation.\n    * And we have to conform with the interface of the original service.\n    * */\n    this.ruler.getDimensions()\n      .pipe(map(dimensions => ({ width: dimensions.clientWidth, height: dimensions.clientHeight })))\n      .subscribe(rect => res = rect);\n    return res;\n  }\n\n  getViewportScrollPosition(): { left: number; top: number } {\n    let res;\n    /*\n    * getPosition call is really synchronous operation.\n    * And we have to conform with the interface of the original service.\n    * */\n    this.scroll.getPosition()\n      .pipe(map((position: NbScrollPosition) => ({ top: position.y, left: position.x })))\n      .subscribe(position => res = position);\n    return res;\n  }\n}\n"]}