{"version":3,"file":"sidebar.service.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/sidebar/sidebar.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAc,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC;;;;;;;GAOG;AAEH;IADA;QAGU,YAAO,GAAG,IAAI,OAAO,EAAqC,CAAC;QAC3D,YAAO,GAAG,IAAI,OAAO,EAAmB,CAAC;QACzC,cAAS,GAAG,IAAI,OAAO,EAAmB,CAAC;IAuDrD,CAAC;IArDC;;;;OAIG;IACH,mCAAQ,GAAR;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,mCAAQ,GAAR;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,qCAAU,GAAV;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACH,iCAAM,GAAN,UAAO,OAAe,EAAE,GAAY;QAA7B,wBAAA,EAAA,eAAe;QACpB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,SAAA,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,iCAAM,GAAN,UAAO,GAAY;QACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,mCAAQ,GAAR,UAAS,GAAY;QACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;IAC/B,CAAC;IAzDU,gBAAgB;QAD5B,UAAU,EAAE;OACA,gBAAgB,CA2D5B;IAAD,uBAAC;CAAA,AA3DD,IA2DC;SA3DY,gBAAgB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * Sidebar service.\n *\n * Root module service to control the sidebar from any part of the app.\n *\n * Allows you to change sidebar state dynamically from any part of the app:\n * @stacked-example(Sidebar State, sidebar/sidebar-toggle.component)\n */\n@Injectable()\nexport class NbSidebarService {\n\n  private toggle$ = new Subject<{ compact: boolean, tag: string }>();\n  private expand$ = new Subject<{ tag: string }>();\n  private collapse$ = new Subject<{ tag: string }>();\n\n  /**\n   * Subscribe to toggle events\n   *\n   * @returns Observable<{ compact: boolean, tag: string }>\n   */\n  onToggle(): Observable<{ compact: boolean, tag: string }> {\n    return this.toggle$.pipe(share());\n  }\n\n  /**\n   * Subscribe to expand events\n   * @returns Observable<{ tag: string }>\n   */\n  onExpand(): Observable<{ tag: string }> {\n    return this.expand$.pipe(share());\n  }\n\n  /**\n   * Subscribe to collapse evens\n   * @returns Observable<{ tag: string }>\n   */\n  onCollapse(): Observable<{ tag: string }> {\n    return this.collapse$.pipe(share());\n  }\n\n  /**\n   * Toggle a sidebar\n   * @param {boolean} compact\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar you want to control\n   */\n  toggle(compact = false, tag?: string) {\n    this.toggle$.next({ compact, tag });\n  }\n\n  /**\n   * Expands a sidebar\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar you want to control\n   */\n  expand(tag?: string) {\n    this.expand$.next({ tag });\n  }\n\n  /**\n   * Collapses a sidebar\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar you want to control\n   */\n  collapse(tag?: string) {\n    this.collapse$.next({ tag });\n  }\n\n}\n"]}