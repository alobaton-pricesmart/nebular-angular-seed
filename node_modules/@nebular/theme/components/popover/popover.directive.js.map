{"version":3,"file":"popover.directive.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/popover/popover.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy, OnInit,\n} from '@angular/core';\n\nimport {\n  NbAdjustment,\n  NbOverlayContent,\n  NbPosition,\n  NbTrigger,\n  NbDynamicOverlayHandler,\n  NbDynamicOverlay,\n  NbDynamicOverlayController,\n} from '../cdk';\nimport { NbPopoverComponent } from './popover.component';\n\n\n/**\n * Powerful popover directive, which provides the best UX for your users.\n *\n * @stacked-example(Showcase, popover/popover-showcase.component)\n *\n * Popover can accept different content such as:\n * TemplateRef\n *\n * ```html\n * <button [nbPopover]=\"templateRef\"></button>\n * <ng-template #templateRef>\n *   <span>Hello, Popover!</span>\n * </ng-template>\n * ```\n * ### Installation\n *\n * Import `NbPopoverModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *   \t// ...\n *     NbPopoverModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Custom components\n *\n * ```html\n * <button [nbPopover]=\"MyPopoverComponent\"></button>\n * ```\n *\n * Both custom components and templateRef popovers can receive *contentContext* property\n * that will be passed to the content props.\n *\n * Primitive types\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\"></button>\n * ```\n *\n * Popover has different placements, such as: top, bottom, left, right, start and end\n * which can be used as following:\n *\n * @stacked-example(Placements, popover/popover-placements.component)\n *\n * By default popover will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change position of the popover container.\n * If you wanna disable this behaviour just set it falsy value.\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\" [nbPopoverAdjustment]=\"false\"></button>\n * ```\n *\n * Popover has a number of triggers which provides an ability to show and hide the component in different ways:\n *\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\n * somewhere on the document outside the component.\n * - Hint provides capability to show the component when the user hovers over the host element\n * and hide when the user hovers out of the host.\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\n * the container element the component remains open, so that it is possible to interact with it content.\n * - Focus mode is applied when user focuses the element.\n * - Noop mode - the component won't react to the user interaction.\n *\n * @stacked-example(Available Triggers, popover/popover-modes.component.html)\n *\n * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide\n * as a result of some third-party action, like HTTP request or validation check:\n *\n * @stacked-example(Manual Control, popover/popover-noop.component)\n *\n * Below are examples for manual popover settings control, both via template binding and code.\n * @stacked-example(Popover Settings, popover/popover-dynamic.component)\n *\n * Please note, while manipulating Popover setting via code, you need to call `rebuild()` method to apply the settings\n * changed.\n * @stacked-example(Popover Settings Code, popover/popover-dynamic-code.component)\n *\n * @additional-example(Template Ref, popover/popover-template-ref.component)\n * @additional-example(Custom Component, popover/popover-custom-component.component)\n * */\n@Directive({\n  selector: '[nbPopover]',\n  providers: [NbDynamicOverlayHandler, NbDynamicOverlay],\n})\nexport class NbPopoverDirective implements NbDynamicOverlayController, OnChanges, AfterViewInit, OnDestroy, OnInit {\n\n  /**\n   * Popover content which will be rendered in NbArrowedOverlayContainerComponent.\n   * Available content: template ref, component and any primitive.\n   * */\n  @Input('nbPopover')\n  content: NbOverlayContent;\n\n  /**\n   * Container content context. Will be applied to the rendered component.\n   * */\n  @Input('nbPopoverContext')\n  context: Object = {};\n\n  /**\n   * Position will be calculated relatively host element based on the position.\n   * Can be top, right, bottom, left, start or end.\n   * */\n  @Input('nbPopoverPlacement')\n  position: NbPosition = NbPosition.TOP;\n\n  /**\n   * Container position will be changes automatically based on this strategy if container can't fit view port.\n   * Set this property to any falsy value if you want to disable automatically adjustment.\n   * Available values: clockwise, counterclockwise.\n   * */\n  @Input('nbPopoverAdjustment')\n  adjustment: NbAdjustment = NbAdjustment.CLOCKWISE;\n\n  /**\n   * Deprecated, use `trigger`\n   * @deprecated\n   * @breaking-change 4.0.0\n   * */\n  @Input('nbPopoverMode')\n  set mode(mode) {\n    console.warn(`Popover 'nbPopoverMode' input is deprecated and will be removed as of 4.0.0.\n      Use 'nbPopoverTrigger' instead.`);\n    this.trigger = mode;\n  }\n  get mode() {\n    return this.trigger;\n  }\n\n  /**\n   * Describes when the container will be shown.\n   * Available options: `click`, `hover`, `hint`, `focus` and `noop`\n   * */\n  @Input('nbPopoverTrigger')\n  trigger: NbTrigger = NbTrigger.CLICK;\n\n  private dynamicOverlay: NbDynamicOverlay;\n\n  constructor(private hostRef: ElementRef,\n              private dynamicOverlayHandler: NbDynamicOverlayHandler) {\n  }\n\n  ngOnInit() {\n    this.dynamicOverlayHandler\n      .host(this.hostRef)\n      .componentType(NbPopoverComponent);\n  }\n\n  ngOnChanges() {\n    this.rebuild();\n  }\n\n  ngAfterViewInit() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .build();\n  }\n\n  rebuild() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .rebuild();\n  }\n\n  show() {\n    this.dynamicOverlay.show();\n  }\n\n  hide() {\n    this.dynamicOverlay.hide();\n  }\n\n  toggle() {\n    this.dynamicOverlay.toggle();\n  }\n\n  ngOnDestroy() {\n    this.dynamicOverlayHandler.destroy();\n  }\n\n  protected configureDynamicOverlay() {\n    return this.dynamicOverlayHandler\n      .position(this.position)\n      .trigger(this.trigger)\n      .adjustment(this.adjustment)\n      .content(this.content)\n      .context(this.context);\n  }\n}\n"]}