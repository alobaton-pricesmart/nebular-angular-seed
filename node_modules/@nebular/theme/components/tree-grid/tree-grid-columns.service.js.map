{"version":3,"file":"tree-grid-columns.service.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/tree-grid/tree-grid-columns.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, IterableDiffer, IterableDiffers } from '@angular/core';\nimport { merge, Observable, Subject } from 'rxjs';\n\n\n@Injectable()\nexport class NbColumnsService {\n  private allColumns: string[];\n  private visibleColumns: string[];\n  private changesDiffer: IterableDiffer<any>;\n  private columnHide$: Subject<void> = new Subject<void>();\n  private columnShow$: Subject<void> = new Subject<void>();\n\n  constructor(private differs: IterableDiffers) {}\n\n  setColumns(columns: Iterable<string>): void {\n    if (!this.changesDiffer) {\n      this.changesDiffer = this.differs.find(columns || []).create();\n    }\n\n    if (this.changesDiffer.diff(columns)) {\n      this.allColumns = Array.from(columns);\n      this.visibleColumns = Array.from(columns);\n    }\n  }\n\n  getVisibleColumns(): string[] {\n    return this.visibleColumns;\n  }\n\n  hideColumn(column: string): void {\n    const toRemove = this.visibleColumns.indexOf(column);\n    if (toRemove > -1) {\n      this.visibleColumns.splice(toRemove, 1);\n      this.columnHide$.next();\n    }\n  }\n\n  showColumn(column: string): void {\n    if (this.visibleColumns.includes(column)) {\n      return;\n    }\n    this.visibleColumns.splice(this.findInsertIndex(column), 0, column);\n    this.columnShow$.next();\n  }\n\n  onColumnsChange(): Observable<void> {\n    return merge(this.columnShow$, this.columnHide$);\n  }\n\n  private findInsertIndex(column: string): number {\n    const initialIndex = this.allColumns.indexOf(column);\n\n    if (initialIndex === 0 || !this.visibleColumns.length) {\n      return 0;\n    }\n    if (initialIndex === this.allColumns.length - 1) {\n      return this.visibleColumns.length;\n    }\n\n    const leftSiblingIndex = initialIndex - 1;\n    for (let i = leftSiblingIndex; i >= 0; i--) {\n      const leftSibling = this.allColumns[i];\n      const index = this.visibleColumns.indexOf(leftSibling);\n      if (index !== -1) {\n        return index + 1;\n      }\n    }\n\n    const rightSiblingIndex = initialIndex + 1;\n    for (let i = rightSiblingIndex; i < this.allColumns.length; i++) {\n      const rightSibling = this.allColumns[i];\n      const index = this.visibleColumns.indexOf(rightSibling);\n      if (index !== -1) {\n        return index;\n      }\n    }\n\n    throw new Error(`Can't restore column position.`);\n  }\n}\n"]}