{"version":3,"file":"tree-grid-filter.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/tree-grid/tree-grid-filter.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAqB,MAAM,eAAe,CAAC;AAClF,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAKzD;IAAA;IAMA,CAAC;IAHC,kCAAM,GAAN,UAAO,aAAqB;QAC1B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC;IAJkB;QAAlB,KAAK,CAAC,UAAU,CAAC;;yDAA0B;IADjC,iBAAiB;QAD7B,SAAS,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;OACzB,iBAAiB,CAM7B;IAAD,wBAAC;CAAA,AAND,IAMC;SANY,iBAAiB;AAQ9B;;GAEG;AAKH;IAA4C,0CAAiB;IAJ7D;QAAA,qEAoCC;QA/BS,aAAO,GAAoB,IAAI,OAAO,EAAU,CAAC;QACjD,WAAK,GAAY,IAAI,CAAC;QAI9B;;;WAGG;QACM,kBAAY,GAAW,GAAG,CAAC;;IAsBtC,CAAC;+BAhCY,sBAAsB;IAYjC,yCAAQ,GAAR;QAAA,iBASC;QARC,IAAI,CAAC,OAAO;aACT,IAAI,CACH,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,EAAV,CAAU,CAAC,EAC3B,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAChC;aACA,SAAS,CAAC,UAAC,KAAa;YACvB,iBAAM,MAAM,aAAC,KAAK,CAAC,CAAA;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,4CAAW,GAAX;QACE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;IAGD,uCAAM,GAAN,UAAO,KAAK;QACV,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;;IA3BuB;QAAvB,KAAK,CAAC,eAAe,CAAC;;8DAA0B;IAMxC;QAAR,KAAK,EAAE;;gEAA4B;IAmBpC;QADC,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;wDAGjC;IA/BU,sBAAsB;QAJlC,SAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,wBAAsB,EAAE,CAAC;SACjF,CAAC;OACW,sBAAsB,CAgClC;IAAD,6BAAC;CAAA,AAhCD,CAA4C,iBAAiB,GAgC5D;SAhCY,sBAAsB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Directive, HostListener, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, takeWhile } from 'rxjs/operators';\n\nimport { NbFilterable } from './data-source/tree-grid-data-source';\n\n@Directive({ selector: '[nbFilter]' })\nexport class NbFilterDirective {\n  @Input('nbFilter') filterable: NbFilterable;\n\n  filter(filterRequest: string) {\n    this.filterable.filter(filterRequest);\n  }\n}\n\n/**\n * Helper directive to trigger data source's filter method when user types in input\n */\n@Directive({\n  selector: '[nbFilterInput]',\n  providers: [{ provide: NbFilterDirective, useExisting: NbFilterInputDirective }],\n})\nexport class NbFilterInputDirective extends NbFilterDirective implements OnInit, OnDestroy {\n  private search$: Subject<string> = new Subject<string>();\n  private alive: boolean = true;\n\n  @Input('nbFilterInput') filterable: NbFilterable;\n\n  /**\n   * Debounce time before triggering filter method. Set in milliseconds.\n   * Default 200.\n   */\n  @Input() debounceTime: number = 200;\n\n  ngOnInit() {\n    this.search$\n      .pipe(\n        takeWhile(() => this.alive),\n        debounceTime(this.debounceTime),\n      )\n      .subscribe((query: string) => {\n        super.filter(query)\n      });\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n    this.search$.complete();\n  }\n\n  @HostListener('input', ['$event'])\n  filter(event) {\n    this.search$.next(event.target.value);\n  }\n}\n"]}