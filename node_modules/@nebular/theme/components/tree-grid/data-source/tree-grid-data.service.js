var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { Injectable } from '@angular/core';
import { DEFAULT_ROW_LEVEL, NbTreeGridPresentationNode } from './tree-grid.model';
var NbTreeGridDataService = /** @class */ (function () {
    function NbTreeGridDataService() {
    }
    NbTreeGridDataService.prototype.toPresentationNodes = function (nodes, level) {
        var _this = this;
        if (level === void 0) { level = DEFAULT_ROW_LEVEL; }
        return nodes.map(function (node) {
            var presentationNode = new NbTreeGridPresentationNode(node, level);
            if (node.children) {
                presentationNode.children = _this.toPresentationNodes(node.children, level + 1);
            }
            return presentationNode;
        });
    };
    NbTreeGridDataService.prototype.flattenExpanded = function (nodes) {
        var _this = this;
        return nodes.reduce(function (res, node) {
            res.push(node);
            if (node.expanded && node.hasChildren()) {
                res.push.apply(res, _this.flattenExpanded(node.children));
            }
            return res;
        }, []);
    };
    NbTreeGridDataService.prototype.copy = function (nodes) {
        var _this = this;
        return nodes.map(function (node) {
            var presentationNode = new NbTreeGridPresentationNode(node.node, node.level);
            presentationNode.expanded = node.expanded;
            if (node.hasChildren()) {
                presentationNode.children = _this.copy(node.children);
            }
            return presentationNode;
        });
    };
    NbTreeGridDataService = __decorate([
        Injectable()
    ], NbTreeGridDataService);
    return NbTreeGridDataService;
}());
export { NbTreeGridDataService };
//# sourceMappingURL=tree-grid-data.service.js.map