{"version":3,"file":"tree-grid-filter.service.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/data-source/tree-grid-filter.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAGH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAI3C;;;GAGG;AAEH;IAAA;IAmCA,CAAC;IAlCC,wCAAM,GAAN,UAAO,KAAa,EAAE,IAAqC;QAA3D,iBAqBC;QApBC,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,QAAyC,EAAE,IAAmC;YAChG,IAAM,gBAAgB,GAAG,KAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE3D,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC;YAEjC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YAEtB,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,EAAE;gBAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;iBAAM,IAAI,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;gBACtD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;YAED,OAAO,QAAQ,CAAC;QAClB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAES,iDAAe,GAAzB,UAA0B,IAAO,EAAE,WAAmB;QACpD,IAAM,aAAa,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC;QAC7D,KAAkB,UAAmB,EAAnB,KAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;YAAlC,IAAM,GAAG,SAAA;YACZ,IAAM,WAAW,GAAG,CAAA,KAAG,GAAK,CAAA,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC;YACxD,IAAI,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACvC,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAlCU,uBAAuB;QADnC,UAAU,EAAE;OACA,uBAAuB,CAmCnC;IAAD,8BAAC;CAAA,AAnCD,IAmCC;SAnCY,uBAAuB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n\nimport { Injectable } from '@angular/core';\n\nimport { NbTreeGridPresentationNode } from './tree-grid.model';\n\n/**\n * Service used to filter tree grid data. Searched searchString in all object values.\n * If you need custom filter, you can extend this service and override filterPredicate or whole filter method.\n */\n@Injectable()\nexport class NbTreeGridFilterService<T> {\n  filter(query: string, data: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    if (!query) {\n      return data;\n    }\n\n    return data.reduce((filtered: NbTreeGridPresentationNode<T>[], node: NbTreeGridPresentationNode<T>) => {\n      const filteredChildren = this.filter(query, node.children);\n\n      node.children = filteredChildren;\n\n      node.expanded = false;\n\n      if (filteredChildren && filteredChildren.length) {\n        node.expanded = true;\n        filtered.push(node);\n      } else if (this.filterPredicate(node.node.data, query)) {\n        filtered.push(node);\n      }\n\n      return filtered;\n    }, []);\n  }\n\n  protected filterPredicate(data: T, searchQuery: string): boolean {\n    const preparedQuery = searchQuery.trim().toLocaleLowerCase();\n    for (const val of Object.values(data)) {\n      const preparedVal = `${val}`.trim().toLocaleLowerCase();\n      if (preparedVal.includes(preparedQuery)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n"]}