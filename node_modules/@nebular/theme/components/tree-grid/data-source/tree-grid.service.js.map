{"version":3,"file":"tree-grid.service.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/data-source/tree-grid.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAGH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAS3C;IAAA;IAuCA,CAAC;IAtCC,kCAAM,GAAN,UAAO,IAAqC,EAAE,GAAM,EAAE,OAA6B;QAAnF,iBAOC;QAPqD,wBAAA,EAAA,YAA6B;QACjF,IAAM,IAAI,GAAkC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;YACtC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAgC,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,EAAlC,CAAkC,CAAC,CAAC;SACjG;IACH,CAAC;IAED,oCAAQ,GAAR,UAAS,IAAqC,EAAE,GAAM,EAAE,OAA6B;QAArF,iBAOC;QAPuD,wBAAA,EAAA,YAA6B;QACnF,IAAM,IAAI,GAAkC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEtB,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;YACtC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAgC,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,EAApC,CAAoC,CAAC,CAAC;SACnG;IACH,CAAC;IAED,kCAAM,GAAN,UAAO,IAAqC,EAAE,GAAM,EAAE,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;QACjF,IAAM,IAAI,GAAkC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACjE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACnC;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACjC;IACH,CAAC;IAEO,gCAAI,GAAZ,UAAa,IAAqC,EAAE,GAAM;QACxD,IAAM,OAAO,GAAwC,IAAI,QAAC,CAAC;QAE3D,KAAmB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;YAAvB,IAAM,IAAI,gBAAA;YACb,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,EAAE;gBAC1B,OAAO,IAAI,CAAC;aACb;YAED,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,IAAI,CAAC,QAAQ,EAAE;SAChC;IACH,CAAC;IAtCU,iBAAiB;QAD7B,UAAU,EAAE;OACA,iBAAiB,CAuC7B;IAAD,wBAAC;CAAA,AAvCD,IAuCC;SAvCY,iBAAiB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n\nimport { Injectable } from '@angular/core';\n\nimport { NbTreeGridPresentationNode } from './tree-grid.model';\n\nexport interface NbToggleOptions {\n  deep?: boolean;\n}\n\n@Injectable()\nexport class NbTreeGridService<T> {\n  expand(data: NbTreeGridPresentationNode<T>[], row: T, options: NbToggleOptions = {}) {\n    const node: NbTreeGridPresentationNode<T> = this.find(data, row);\n    node.expanded = true;\n\n    if (options.deep && node.hasChildren()) {\n      node.children.forEach((n: NbTreeGridPresentationNode<T>) => this.expand(data, n.data, options));\n    }\n  }\n\n  collapse(data: NbTreeGridPresentationNode<T>[], row: T, options: NbToggleOptions = {}) {\n    const node: NbTreeGridPresentationNode<T> = this.find(data, row);\n    node.expanded = false;\n\n    if (options.deep && node.hasChildren()) {\n      node.children.forEach((n: NbTreeGridPresentationNode<T>) => this.collapse(data, n.data, options));\n    }\n  }\n\n  toggle(data: NbTreeGridPresentationNode<T>[], row: T, options: NbToggleOptions = {}) {\n    const node: NbTreeGridPresentationNode<T> = this.find(data, row);\n    if (node.expanded) {\n      this.collapse(data, row, options);\n    } else {\n      this.expand(data, row, options);\n    }\n  }\n\n  private find(data: NbTreeGridPresentationNode<T>[], row: T): NbTreeGridPresentationNode<T> {\n    const toCheck: NbTreeGridPresentationNode<T>[] = [...data];\n\n    for (const node of toCheck) {\n      if (node.node.data === row) {\n        return node;\n      }\n\n      toCheck.push(...node.children);\n    }\n  }\n}\n"]}