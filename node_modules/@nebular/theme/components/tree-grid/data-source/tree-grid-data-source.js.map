{"version":3,"file":"tree-grid-data-source.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/data-source/tree-grid-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { NbDataSource } from '../../cdk/table';\nimport { NbCollectionViewer } from '../../cdk/collections';\nimport { NbTreeGridSortService } from './tree-grid-sort.service';\nimport { NbTreeGridFilterService } from './tree-grid-filter.service';\nimport { NbToggleOptions, NbTreeGridService } from './tree-grid.service';\nimport { NbTreeGridDataService } from './tree-grid-data.service';\nimport { NbSortable, NbSortRequest } from '../tree-grid-sort.component';\nimport { DEFAULT_ROW_LEVEL, NbTreeGridNode, NbTreeGridPresentationNode } from './tree-grid.model';\n\nexport interface NbFilterable {\n  filter(filterRequest: string);\n}\n\nexport class NbTreeGridDataSource<T> extends NbDataSource<NbTreeGridPresentationNode<T>>\n                                     implements NbSortable, NbFilterable {\n  /** Stream that emits when a new data array is set on the data source. */\n  private data: BehaviorSubject<NbTreeGridPresentationNode<T>[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly renderData = new BehaviorSubject<NbTreeGridPresentationNode<T>[]>([]);\n\n  private readonly filterRequest = new BehaviorSubject<string>('');\n\n  private readonly sortRequest = new BehaviorSubject<NbSortRequest>(null);\n\n  constructor(private sortService: NbTreeGridSortService<T>,\n              private filterService: NbTreeGridFilterService<T>,\n              private treeGridService: NbTreeGridService<T>,\n              private treeGridDataService: NbTreeGridDataService<T>) {\n    super();\n  }\n\n  setData(data: NbTreeGridNode<T>[]) {\n    const presentationData: NbTreeGridPresentationNode<T>[] = data\n      ? this.treeGridDataService.toPresentationNodes(data)\n      : [];\n    this.data = new BehaviorSubject(presentationData);\n    this.updateChangeSubscription();\n  }\n\n  connect(\n    collectionViewer: NbCollectionViewer,\n  ): Observable<NbTreeGridPresentationNode<T>[] | ReadonlyArray<NbTreeGridPresentationNode<T>>> {\n    return this.renderData;\n  }\n\n  disconnect(collectionViewer: NbCollectionViewer) {\n  }\n\n  expand(row: T) {\n    this.treeGridService.expand(this.data.value, row);\n    this.data.next(this.data.value);\n  }\n\n  collapse(row: T) {\n    this.treeGridService.collapse(this.data.value, row);\n    this.data.next(this.data.value);\n  }\n\n  toggle(row: T, options?: NbToggleOptions) {\n    this.treeGridService.toggle(this.data.value, row, options);\n    this.data.next(this.data.value);\n  }\n\n  toggleByIndex(dataIndex: number, options?: NbToggleOptions) {\n    const node: NbTreeGridPresentationNode<T> = this.renderData.value && this.renderData.value[dataIndex];\n    if (node) {\n      this.toggle(node.data, options);\n    }\n  }\n\n  getLevel(rowIndex: number): number {\n    const row = this.renderData.value[rowIndex];\n    return row ? row.level : DEFAULT_ROW_LEVEL;\n  }\n\n  sort(sortRequest: NbSortRequest) {\n    this.sortRequest.next(sortRequest);\n  }\n\n  filter(searchQuery: string) {\n    this.filterRequest.next(searchQuery);\n  }\n\n  protected updateChangeSubscription() {\n    const dataStream = this.data;\n\n    const filteredData = combineLatest(dataStream, this.filterRequest)\n      .pipe(\n        map(([data]) => this.treeGridDataService.copy(data)),\n        map(data => this.filterData(data)),\n      );\n\n    const sortedData = combineLatest(filteredData, this.sortRequest)\n      .pipe(\n        map(([data]) => this.sortData(data)),\n      );\n\n    sortedData\n      .pipe(\n        map((data: NbTreeGridPresentationNode<T>[]) => this.treeGridDataService.flattenExpanded(data)),\n      )\n      .subscribe((data: NbTreeGridPresentationNode<T>[]) => this.renderData.next(data));\n  }\n\n  private filterData(data: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    return this.filterService.filter(this.filterRequest.value, data);\n  }\n\n  private sortData(data: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    return this.sortService.sort(this.sortRequest.value, data);\n  }\n}\n\n@Injectable()\nexport class NbTreeGridDataSourceBuilder<T> {\n  constructor(private filterService: NbTreeGridFilterService<T>,\n              private sortService: NbTreeGridSortService<T>,\n              private treeGridService: NbTreeGridService<T>,\n              private treeGridDataService: NbTreeGridDataService<T>) {\n  }\n\n  create(data: NbTreeGridNode<T>[]): NbTreeGridDataSource<T> {\n    const dataSource = new NbTreeGridDataSource<T>(\n      this.sortService,\n      this.filterService,\n      this.treeGridService,\n      this.treeGridDataService,\n    );\n\n    dataSource.setData(data);\n    return dataSource;\n  }\n}\n"]}