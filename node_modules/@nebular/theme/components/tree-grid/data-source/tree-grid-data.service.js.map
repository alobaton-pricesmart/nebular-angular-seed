{"version":3,"file":"tree-grid-data.service.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/data-source/tree-grid-data.service.ts"],"names":[],"mappings":";;;;;;AAAA;;;;GAIG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,iBAAiB,EAAkB,0BAA0B,EAAE,MAAM,mBAAmB,CAAC;AAGlG;IAAA;IAsCA,CAAC;IApCC,mDAAmB,GAAnB,UAAoB,KAA0B,EAAE,KAAiC;QAAjF,iBAUC;QAV+C,sBAAA,EAAA,yBAAiC;QAC/E,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,IAAuB;YACvC,IAAM,gBAAgB,GAAG,IAAI,0BAA0B,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAErE,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,gBAAgB,CAAC,QAAQ,GAAG,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;aAChF;YAED,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+CAAe,GAAf,UAAgB,KAAsC;QAAtD,iBAUC;QATC,OAAO,KAAK,CAAC,MAAM,CAAC,UAAC,GAAoC,EAAE,IAAmC;YAC5F,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEf,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;gBACvC,GAAG,CAAC,IAAI,OAAR,GAAG,EAAS,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;aAClD;YAED,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAED,oCAAI,GAAJ,UAAK,KAAsC;QAA3C,iBAWC;QAVC,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,IAAmC;YACnD,IAAM,gBAAgB,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/E,gBAAgB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAE1C,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;gBACtB,gBAAgB,CAAC,QAAQ,GAAG,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACtD;YAED,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IArCU,qBAAqB;QADjC,UAAU,EAAE;OACA,qBAAqB,CAsCjC;IAAD,4BAAC;CAAA,AAtCD,IAsCC;SAtCY,qBAAqB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable } from '@angular/core';\n\nimport { DEFAULT_ROW_LEVEL, NbTreeGridNode, NbTreeGridPresentationNode } from './tree-grid.model';\n\n@Injectable()\nexport class NbTreeGridDataService<T> {\n\n  toPresentationNodes(nodes: NbTreeGridNode<T>[], level: number = DEFAULT_ROW_LEVEL): NbTreeGridPresentationNode<T>[] {\n    return nodes.map((node: NbTreeGridNode<T>) => {\n      const presentationNode = new NbTreeGridPresentationNode(node, level);\n\n      if (node.children) {\n        presentationNode.children = this.toPresentationNodes(node.children, level + 1);\n      }\n\n      return presentationNode;\n    });\n  }\n\n  flattenExpanded(nodes: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    return nodes.reduce((res: NbTreeGridPresentationNode<T>[], node: NbTreeGridPresentationNode<T>) => {\n      res.push(node);\n\n      if (node.expanded && node.hasChildren()) {\n        res.push(...this.flattenExpanded(node.children));\n      }\n\n      return res;\n    }, []);\n  }\n\n  copy(nodes: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    return nodes.map((node: NbTreeGridPresentationNode<T>) => {\n      const presentationNode = new NbTreeGridPresentationNode(node.node, node.level);\n      presentationNode.expanded = node.expanded;\n\n      if (node.hasChildren()) {\n        presentationNode.children = this.copy(node.children);\n      }\n\n      return presentationNode;\n    });\n  }\n}\n"]}