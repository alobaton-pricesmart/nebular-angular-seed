{"version":3,"file":"tree-grid-sort.service.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/data-source/tree-grid-sort.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAGH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAiB,MAAM,6BAA6B,CAAC;AAG7E;;;GAGG;AAEH;IAAA;IAmCA,CAAC;IAjCC,oCAAI,GAAJ,UAAK,OAAsB,EAAE,IAAqC;QAAlE,iBAUC;QATC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,IAAI,CAAC;SACb;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,EAAhC,CAAgC,CAAC,CAAC;QACvE,KAAmB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;YAApB,IAAM,IAAI,aAAA;YACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,0CAAU,GAApB,UACE,OAAsB,EACtB,EAAiC,EACjC,EAAiC;QAEjC,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;QAC3B,IAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC;QAC9B,IAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,IAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEvB,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,GAAG,GAAG,CAAC,CAAA;SACR;QACD,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,GAAG,GAAG,CAAC,CAAC,CAAA;SACT;QAED,OAAO,GAAG,KAAK,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IAC5D,CAAC;IAlCU,qBAAqB;QADjC,UAAU,EAAE;OACA,qBAAqB,CAmCjC;IAAD,4BAAC;CAAA,AAnCD,IAmCC;SAnCY,qBAAqB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { NbSortDirection, NbSortRequest } from '../tree-grid-sort.component';\nimport { NbTreeGridPresentationNode } from './tree-grid.model';\n\n/**\n * Service used to sort tree grid data. Uses Array.prototype.sort method.\n * If you need custom sorting, you can extend this service and override comparator or whole sort method.\n */\n@Injectable()\nexport class NbTreeGridSortService<T> {\n\n  sort(request: NbSortRequest, data: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    if (!request) {\n      return data;\n    }\n\n    const sorted = data.sort((na, nb) => this.comparator(request, na, nb));\n    for (const node of data) {\n      node.children = this.sort(request, node.children);\n    }\n    return sorted;\n  }\n\n  protected comparator(\n    request: NbSortRequest,\n    na: NbTreeGridPresentationNode<T>,\n    nb: NbTreeGridPresentationNode<T>,\n  ): number {\n    const key = request.column;\n    const dir = request.direction;\n    const a = na.data[key];\n    const b = nb.data[key];\n\n    let res = 0;\n\n    if (a > b) {\n      res = 1\n    }\n    if (a < b) {\n      res = -1\n    }\n\n    return dir === NbSortDirection.ASCENDING ? res : res * -1;\n  }\n}\n"]}