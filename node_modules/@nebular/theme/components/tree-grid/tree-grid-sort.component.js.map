{"version":3,"file":"tree-grid-sort.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/tree-grid/tree-grid-sort.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\n\nimport { convertToBoolProperty } from '../helpers';\nimport { NB_SORT_HEADER_COLUMN_DEF } from '../cdk/table';\n\n/** Column definition associated with a `NbSortHeaderDirective`. */\ninterface NbSortHeaderColumnDef {\n  name: string;\n}\n\nexport interface NbSortRequest {\n  column: string;\n  direction: NbSortDirection;\n}\n\nexport interface NbSortable {\n  sort(sortRequest: NbSortRequest);\n}\n\nexport enum NbSortDirection {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc',\n  NONE = '',\n}\nconst sortDirections: NbSortDirection[] = [\n  NbSortDirection.ASCENDING,\n  NbSortDirection.DESCENDING,\n  NbSortDirection.NONE,\n];\n\n/**\n * Directive triggers sort method of passed object when sort header changes direction\n */\n@Directive({ selector: '[nbSort]' })\nexport class NbSortDirective {\n  @Input('nbSort') sortable: NbSortable;\n\n  @Output() sort: EventEmitter<NbSortRequest> = new EventEmitter<NbSortRequest>();\n\n  emitSort(sortRequest: NbSortRequest) {\n    if (this.sortable && this.sortable.sort) {\n      this.sortable.sort(sortRequest);\n    }\n    this.sort.emit(sortRequest);\n  }\n}\n\nexport interface NbSortHeaderIconDirectiveContext {\n  $implicit: NbSortDirection;\n  isAscending: boolean;\n  isDescending: boolean;\n  isNone: boolean;\n}\n\n/**\n * Directive for headers sort icons. Mark you icon implementation with this structural directive and\n * it'll set template's implicit context with current direction. Context also has `isAscending`,\n * `isDescending` and `isNone` properties.\n */\n@Directive({ selector: '[nbSortHeaderIcon]' })\nexport class NbSortHeaderIconDirective {}\n\n@Component({\n  selector: 'nb-sort-icon',\n  template: `\n    <ng-container *ngIf=\"isDirectionSet()\">\n      <i [class.nb-arrow-down]=\"isAscending()\"\n         [class.nb-arrow-up]=\"isDescending()\"\n         class=\"icon\"\n         aria-hidden=\"true\">\n      </i>\n    </ng-container>\n  `,\n})\nexport class NbSortIconComponent {\n  @Input() direction: NbSortDirection = NbSortDirection.NONE;\n\n  isAscending(): boolean {\n    return this.direction === NbSortDirection.ASCENDING;\n  }\n\n  isDescending(): boolean {\n    return this.direction === NbSortDirection.DESCENDING;\n  }\n\n  isDirectionSet(): boolean {\n    return this.isAscending() || this.isDescending();\n  }\n}\n\n/**\n * Marks header as sort header so it emitting sort event when clicked.\n */\n@Component({\n  selector: '[nbSortHeader]',\n  template: `\n    <button\n      class=\"nb-tree-grid-header-change-sort-button\"\n      type=\"button\"\n      [attr.disabled]=\"getDisabledAttributeValue()\"\n      (click)=\"sortData()\">\n      <ng-content></ng-content>\n    </button>\n    <nb-sort-icon *ngIf=\"!sortIcon; else customIcon\" [direction]=\"direction\"></nb-sort-icon>\n    <ng-template #customIcon [ngTemplateOutlet]=\"sortIcon\" [ngTemplateOutletContext]=\"getIconContext()\"></ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbSortHeaderComponent {\n\n  @ContentChild(NbSortHeaderIconDirective, { read: TemplateRef })\n  sortIcon: TemplateRef<NbSortHeaderIconDirectiveContext>;\n\n  /**\n   * Current sort direction. Possible values: `asc`, `desc`, ``(none)\n   * @type {NbSortDirection}\n   */\n  @Input('nbSortHeader') direction: NbSortDirection;\n\n  private disabledValue: boolean = false;\n\n  /**\n   * Disable sort header\n   */\n  @Input()\n  @HostBinding('class.disabled')\n  set disabled(value) {\n    this.disabledValue = convertToBoolProperty(value);\n  }\n  get disabled(): boolean {\n    return this.disabledValue;\n  }\n\n  @HostListener('click')\n  sortIfEnabled() {\n    if (!this.disabled) {\n      this.sortData();\n    }\n  }\n\n  constructor(\n    private sort: NbSortDirective,\n    @Inject(NB_SORT_HEADER_COLUMN_DEF) private columnDef: NbSortHeaderColumnDef,\n  ) {}\n\n  isAscending(): boolean {\n    return this.direction === NbSortDirection.ASCENDING;\n  }\n\n  isDescending(): boolean {\n    return this.direction === NbSortDirection.DESCENDING;\n  }\n\n  sortData(): void {\n    const sortRequest = this.createSortRequest();\n    this.sort.emitSort(sortRequest);\n  }\n\n  getIconContext(): NbSortHeaderIconDirectiveContext {\n    return {\n      $implicit: this.direction,\n      isAscending: this.isAscending(),\n      isDescending: this.isDescending(),\n      isNone: !this.isAscending() && !this.isDescending(),\n    };\n  }\n\n  getDisabledAttributeValue(): '' | null {\n    return this.disabled ? '' : null;\n  }\n\n  private createSortRequest(): NbSortRequest {\n    this.direction = this.getNextDirection();\n    return { direction: this.direction, column: this.columnDef.name };\n  }\n\n  private getNextDirection(): NbSortDirection {\n    const sortDirectionCycle = sortDirections;\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n}\n"]}