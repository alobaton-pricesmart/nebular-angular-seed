{"version":3,"file":"tree-grid-cell.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/tree-grid/tree-grid-cell.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Inject,\n  OnInit,\n  OnDestroy,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { filter, takeWhile } from 'rxjs/operators';\n\nimport { NbLayoutDirectionService } from '../../services/direction.service';\nimport { NB_WINDOW } from '../../theme.options';\nimport {\n  NbCdkCell,\n  NbCdkFooterCell,\n  NbCellDirective,\n  NbFooterCellDirective,\n  NbHeaderCellDirective,\n  NbCdkHeaderCell,\n} from '../cdk/table';\nimport { NB_TREE_GRID } from './tree-grid-injection-tokens';\nimport { NbTreeGridComponent } from './tree-grid.component';\nimport { NbTreeGridColumnDefDirective } from './tree-grid-column-def.directive';\nimport { DEFAULT_ROW_LEVEL } from './data-source/tree-grid.model';\nimport { NbColumnsService } from './tree-grid-columns.service';\n\n@Directive({\n  selector: 'td[nbTreeGridCell]',\n  host: {\n    'class': 'nb-tree-grid-cell',\n    'role': 'gridcell',\n  },\n  providers: [{ provide: NbCdkCell, useExisting: NbTreeGridCellDirective }],\n})\nexport class NbTreeGridCellDirective extends NbCellDirective implements OnInit, OnDestroy {\n  private alive: boolean = true;\n  private readonly tree: NbTreeGridComponent<any>;\n  private readonly columnDef: NbTreeGridColumnDefDirective;\n  private initialLeftPadding: string = '';\n  private initialRightPadding: string = '';\n  private latestWidth: string;\n  elementRef: ElementRef<HTMLElement>;\n\n  @HostBinding('style.width')\n  get columnWidth(): string {\n    this.latestWidth = this.tree.getColumnWidth();\n    return this.latestWidth || null;\n  }\n\n  @HostBinding('style.padding-left')\n  get leftPadding(): string | SafeStyle | null {\n    if (this.directionService.isLtr()) {\n      return this.getStartPadding();\n    }\n    return null;\n  }\n\n  @HostBinding('style.padding-right')\n  get rightPadding(): string | SafeStyle | null {\n    if (this.directionService.isRtl()) {\n      return this.getStartPadding();\n    }\n    return null;\n  }\n\n  constructor(\n    columnDef: NbTreeGridColumnDefDirective,\n    elementRef: ElementRef<HTMLElement>,\n    @Inject(NB_TREE_GRID) tree,\n    @Inject(PLATFORM_ID) private platformId,\n    @Inject(NB_WINDOW) private window,\n    private sanitizer: DomSanitizer,\n    private directionService: NbLayoutDirectionService,\n    private columnService: NbColumnsService,\n    private cd: ChangeDetectorRef,\n  ) {\n    super(columnDef, elementRef);\n    this.tree = tree as NbTreeGridComponent<any>;\n    this.columnDef = columnDef;\n    this.elementRef = elementRef;\n  }\n\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      const style = this.window.getComputedStyle(this.elementRef.nativeElement);\n      this.initialLeftPadding = style.paddingLeft;\n      this.initialRightPadding = style.paddingRight;\n    }\n\n    this.columnService.onColumnsChange()\n      .pipe(\n        takeWhile(() => this.alive),\n        filter(() => this.latestWidth !== this.tree.getColumnWidth()),\n      )\n      .subscribe(() => this.cd.detectChanges());\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n\n  toggleRow(): void {\n    this.tree.toggleCellRow(this);\n  }\n\n  private get initialStartPadding(): string {\n      return this.directionService.isLtr()\n      ? this.initialLeftPadding\n      : this.initialRightPadding;\n  }\n\n  private getStartPadding(): string | SafeStyle | null {\n    const rowLevel = this.tree.getCellLevel(this, this.columnDef.name);\n    if (rowLevel === DEFAULT_ROW_LEVEL) {\n      return null;\n    }\n\n    const nestingLevel = rowLevel + 1;\n    let padding: string = '';\n    if (this.tree.levelPadding) {\n      padding = `calc(${this.tree.levelPadding} * ${nestingLevel})`;\n    } else if (this.initialStartPadding) {\n      padding = `calc(${this.initialStartPadding} * ${nestingLevel})`;\n    }\n\n    if (!padding) {\n      return null;\n    }\n\n    return this.sanitizer.bypassSecurityTrustStyle(padding);\n  }\n}\n\n@Directive({\n  selector: 'th[nbTreeGridHeaderCell]',\n  host: {\n    'class': 'nb-tree-grid-header-cell',\n    'role': 'columnheader',\n  },\n  providers: [{ provide: NbCdkHeaderCell, useExisting: NbTreeGridHeaderCellDirective }],\n})\nexport class NbTreeGridHeaderCellDirective extends NbHeaderCellDirective implements OnInit, OnDestroy {\n  private alive: boolean = true;\n  private latestWidth: string;\n  private readonly tree: NbTreeGridComponent<any>;\n\n  @HostBinding('style.width')\n  get columnWidth(): string {\n    this.latestWidth = this.tree.getColumnWidth();\n    return this.latestWidth || null;\n  }\n\n  constructor(\n    columnDef: NbTreeGridColumnDefDirective,\n    elementRef: ElementRef<HTMLElement>,\n    @Inject(NB_TREE_GRID) tree,\n    private columnService: NbColumnsService,\n    private cd: ChangeDetectorRef,\n  ) {\n    super(columnDef, elementRef);\n    this.tree = tree as NbTreeGridComponent<any>;\n  }\n\n  ngOnInit() {\n    this.columnService.onColumnsChange()\n      .pipe(\n        takeWhile(() => this.alive),\n        filter(() => this.latestWidth !== this.tree.getColumnWidth()),\n      )\n      .subscribe(() => this.cd.detectChanges());\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n}\n\n@Directive({\n  selector: 'td[nbTreeGridFooterCell]',\n  host: {\n    'class': 'nb-tree-grid-footer-cell',\n    'role': 'gridcell',\n  },\n  providers: [{ provide: NbCdkFooterCell, useExisting: NbTreeGridFooterCellDirective }],\n})\nexport class NbTreeGridFooterCellDirective extends NbFooterCellDirective implements OnInit, OnDestroy {\n  private alive: boolean = true;\n  private latestWidth: string;\n  private readonly tree: NbTreeGridComponent<any>;\n\n  @HostBinding('style.width')\n  get columnWidth(): string {\n    this.latestWidth = this.tree.getColumnWidth();\n    return this.latestWidth || null;\n  }\n\n  constructor(\n    columnDef: NbTreeGridColumnDefDirective,\n    elementRef: ElementRef,\n    @Inject(NB_TREE_GRID) tree,\n    private columnService: NbColumnsService,\n    private cd: ChangeDetectorRef,\n  ) {\n    super(columnDef, elementRef);\n    this.tree = tree as NbTreeGridComponent<any>;\n  }\n\n  ngOnInit() {\n    this.columnService.onColumnsChange()\n      .pipe(\n        takeWhile(() => this.alive),\n        filter(() => this.latestWidth !== this.tree.getColumnWidth()),\n      )\n      .subscribe(() => this.cd.detectChanges());\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n}\n"]}