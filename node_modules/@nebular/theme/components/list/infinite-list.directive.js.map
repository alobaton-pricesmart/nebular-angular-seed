{"version":3,"file":"infinite-list.directive.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/list/infinite-list.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Input,\n  HostListener,\n  ElementRef,\n  EventEmitter,\n  Output,\n  OnDestroy,\n  AfterViewInit,\n  ContentChildren,\n  QueryList,\n} from '@angular/core';\nimport { Observable, forkJoin, of as observableOf, interval, timer } from 'rxjs';\nimport { takeWhile, filter, switchMap, map, takeUntil, take } from 'rxjs/operators';\nimport { convertToBoolProperty } from '../helpers';\nimport { NbLayoutScrollService } from '../../services/scroll.service';\nimport { NbLayoutRulerService } from '../../services/ruler.service';\nimport { NbListItemComponent } from './list.component';\n\nexport class NbScrollableContainerDimentions {\n  scrollTop: number;\n  scrollHeight: number;\n  clientHeight: number;\n}\n\n/**\n * Infinite List Directive\n *\n * ```html\n *  <nb-list nbInfiniteList [threshold]=\"500\" (bottomThreshold)=\"loadNext()\">\n *    <nb-list-item *ngFor=\"let item of items\"></nb-list-item>\n *  </nb-list>\n * ```\n *\n * @stacked-example(Simple infinite list, infinite-list/infinite-list-showcase.component)\n *\n * Directive will notify when list scrolled up or down to given a threshold.\n * By default it listen to scroll of list on which applied, but also can be set to listen to window scroll.\n *\n * @stacked-example(Scroll modes, infinite-list/infinite-list-scroll-modes.component)\n *\n * To improve UX of infinite lists, it's better to keep current page in url,\n * so user able to return to the last viewed page or to share a link to this page.\n * `nbListPageTracker` directive will help you to know, what page user currently viewing.\n * Just put it on a list, set page size and it will calculate page that currently in viewport.\n * You can [open the example](example/infinite-list/infinite-news-list.component)\n * in a new tab to check out this feature.\n *\n * @stacked-example(Infinite list with pager, infinite-list/infinite-news-list.component)\n *\n * @stacked-example(Infinite list with placeholders at the top, infinite-list/infinite-list-placeholders.component)\n *\n */\n@Directive({\n  selector: '[nbInfiniteList]',\n})\nexport class NbInfiniteListDirective implements AfterViewInit, OnDestroy {\n\n  private alive = true;\n  private lastScrollPosition;\n  windowScroll = false;\n  private get elementScroll() {\n    return !this.windowScroll;\n  }\n\n  /**\n   * Threshold after which event load more event will be emited.\n   * In pixels.\n   */\n  @Input()\n  threshold: number;\n\n  /**\n   * By default component observes list scroll position.\n   * If set to `true`, component will observe position of page scroll instead.\n   */\n  @Input()\n  set listenWindowScroll(value) {\n    this.windowScroll = convertToBoolProperty(value);\n  }\n\n  /**\n   * Emits when distance between list bottom and current scroll position is less than threshold.\n   */\n  @Output()\n  bottomThreshold = new EventEmitter(true);\n\n  /**\n   * Emits when distance between list top and current scroll position is less than threshold.\n   */\n  @Output()\n  topThreshold = new EventEmitter(true);\n\n  @HostListener('scroll')\n  onElementScroll() {\n    if (this.elementScroll) {\n      this.checkPosition(this.elementRef.nativeElement);\n    }\n  }\n\n  @ContentChildren(NbListItemComponent) listItems: QueryList<NbListItemComponent>;\n\n  constructor(\n    private elementRef: ElementRef,\n    private scrollService: NbLayoutScrollService,\n    private dimensionsService: NbLayoutRulerService,\n  ) {}\n\n  ngAfterViewInit() {\n    this.scrollService.onScroll()\n      .pipe(\n        takeWhile(() => this.alive),\n        filter(() => this.windowScroll),\n        switchMap(() => this.getContainerDimensions()),\n      )\n      .subscribe(dimentions => this.checkPosition(dimentions));\n\n    this.listItems.changes\n      .pipe(\n        takeWhile(() => this.alive),\n        // For some reason, changes are emitted before list item removed from dom,\n        // so dimensions will be incorrect.\n        // Check every 50ms for a second if dom and query are in sync.\n        // Once they synchronized, we can get proper dimensions.\n        switchMap(() => interval(50).pipe(\n          takeUntil(timer(1000)),\n          filter(() => this.inSyncWithDom()),\n          take(1),\n        )),\n        switchMap(() => this.getContainerDimensions()),\n      )\n      .subscribe(dimentions => this.checkPosition(dimentions));\n\n      this.getContainerDimensions().subscribe(dimentions => this.checkPosition(dimentions));\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n\n  checkPosition({ scrollHeight, scrollTop, clientHeight }: NbScrollableContainerDimentions) {\n    const initialCheck = this.lastScrollPosition == null;\n    const manualCheck = this.lastScrollPosition === scrollTop;\n    const scrollUp = scrollTop < this.lastScrollPosition;\n    const scrollDown = scrollTop > this.lastScrollPosition;\n    const distanceToBottom = scrollHeight - scrollTop - clientHeight;\n\n    if ((initialCheck ||  manualCheck || scrollDown) && distanceToBottom <= this.threshold) {\n      this.bottomThreshold.emit();\n    }\n    if ((initialCheck || scrollUp) && scrollTop <= this.threshold) {\n      this.topThreshold.emit();\n    }\n\n    this.lastScrollPosition = scrollTop;\n  }\n\n  private getContainerDimensions(): Observable<NbScrollableContainerDimentions> {\n    if (this.elementScroll) {\n      const { scrollTop, scrollHeight, clientHeight } = this.elementRef.nativeElement;\n      return observableOf({ scrollTop, scrollHeight, clientHeight });\n    }\n\n    return forkJoin(this.scrollService.getPosition(), this.dimensionsService.getDimensions())\n      .pipe(\n          map(([scrollPosition, dimensions]) => ({\n            scrollTop: scrollPosition.y,\n            scrollHeight: dimensions.scrollHeight,\n            clientHeight: dimensions.clientHeight,\n          })),\n      );\n  }\n\n  private inSyncWithDom(): boolean {\n    return this.elementRef.nativeElement.children.length === this.listItems.length;\n  }\n}\n"]}