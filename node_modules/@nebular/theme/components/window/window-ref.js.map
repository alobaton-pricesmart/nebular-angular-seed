{"version":3,"file":"window-ref.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/window/window-ref.ts"],"names":[],"mappings":"AACA,OAAO,EAAc,aAAa,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAE1D,OAAO,EAAkB,aAAa,EAAuB,MAAM,kBAAkB,CAAC;AAEtF;;;;GAIG;AACH;IAoCE,qBAAmB,MAAsB;QAAtB,WAAM,GAAN,MAAM,CAAgB;QAjB/B,iBAAY,GAAG,IAAI,aAAa,CAAsB,CAAC,CAAC,CAAC;QAQzD,YAAO,GAAG,KAAK,CAAC;QAChB,YAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAShC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC;IACnC,CAAC;IA9BD,sBAAI,8BAAK;QAHT;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;aACD,UAAU,QAAuB;YAC/B,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE;gBAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC;gBACjC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;aACrE;QACH,CAAC;;;OAPA;IAaD,sBAAI,oCAAW;QAHf;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QAC1C,CAAC;;;OAAA;IAOD,sBAAI,gCAAO;QAHX;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QACrC,CAAC;;;OAAA;IAMD;;OAEG;IACH,8BAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,8BAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,gCAAU,GAAV;QACE,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,WAAW,CAAC;IACzC,CAAC;IAED,qCAAe,GAAf;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC;IACnC,CAAC;IAED;;SAEK;IACL,2BAAK,GAAL;QACE,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;IACH,kBAAC;AAAD,CAAC,AA/ED,IA+EC","sourcesContent":["import { ComponentRef } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { NbWindowComponent } from './window.component';\nimport { NbWindowConfig, NbWindowState, NbWindowStateChange } from './window.options';\n\n/**\n * The `NbWindowRef` helps to manipulate window after it was created.\n * The window can be dismissed by using `close` method of the windowRef.\n * You can access rendered component as `componentRef` property of the windowRef.\n */\nexport class NbWindowRef {\n  componentRef: ComponentRef<NbWindowComponent>;\n\n  protected prevStateValue: NbWindowState;\n  protected stateValue: NbWindowState;\n  /**\n   * Current window state.\n   */\n  get state() {\n    return this.stateValue;\n  }\n  set state(newState: NbWindowState) {\n    if (newState && this.stateValue !== newState) {\n      this.prevStateValue = this.state;\n      this.stateValue = newState;\n      this.stateChange$.next({ oldState: this.prevStateValue, newState });\n    }\n  }\n\n  protected stateChange$ = new ReplaySubject<NbWindowStateChange>(1);\n  /**\n   * Emits when window state change.\n   */\n  get stateChange(): Observable<NbWindowStateChange> {\n    return this.stateChange$.asObservable();\n  }\n\n  protected _closed = false;\n  protected closed$ = new Subject();\n  /**\n   * Emits when window was closed.\n   */\n  get onClose() {\n    return this.closed$.asObservable();\n  }\n\n  constructor(public config: NbWindowConfig) {\n    this.state = config.initialState;\n  }\n\n  /**\n   * Minimize window.\n   */\n  minimize() {\n    this.state = NbWindowState.MINIMIZED;\n  }\n\n  /**\n   * Maximize window.\n   */\n  maximize() {\n    this.state = NbWindowState.MAXIMIZED;\n  }\n\n  /**\n   * Set window on top.\n   */\n  fullScreen() {\n    this.state = NbWindowState.FULL_SCREEN;\n  }\n\n  toPreviousState() {\n    this.state = this.prevStateValue;\n  }\n\n  /**\n   * Closes window.\n   * */\n  close() {\n    if (this._closed) {\n      return;\n    }\n\n    this._closed = true;\n    this.componentRef.destroy();\n    this.stateChange$.complete();\n    this.closed$.next();\n    this.closed$.complete();\n  }\n}\n"]}