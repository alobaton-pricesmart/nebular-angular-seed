{"version":3,"file":"spinner.service.js","sourceRoot":"","sources":["../../../../.ng_build/theme/services/spinner.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;GAIG;AACH,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C;;GAEG;AAEH;IAKE,0BAAyC,QAAQ;QAAR,aAAQ,GAAR,QAAQ,CAAA;QAHzC,YAAO,GAAmB,EAAE,CAAC;QAC7B,aAAQ,GAAW,mBAAmB,CAAC;IAEK,CAAC;IAErD;;;;OAIG;IACH,yCAAc,GAAd,UAAe,MAAoB;QACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,gCAAK,GAAL;QACE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,+BAAI,GAAJ;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,qCAAU,GAAlB,UAAmB,IAAe;QAAlC,iBASC;QATkB,qBAAA,EAAA,qBAAc,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;YACpC,KAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAC;aACC,KAAK,CAAC,UAAC,KAAK;YACX,uBAAuB;YACvB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8CAA8C;IACtC,sCAAW,GAAnB;QACE,IAAM,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACpC,IAAI,EAAE,EAAE;YACN,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC/B;IACH,CAAC;IAEO,sCAAW,GAAnB;QACE,IAAM,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACpC,IAAI,EAAE,EAAE;YACN,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;SAC9B;IACH,CAAC;IAEO,4CAAiB,GAAzB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IA3DU,gBAAgB;QAD5B,UAAU,EAAE;QAME,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;;OALrB,gBAAgB,CA4D5B;IAAD,uBAAC;CAAA,AA5DD,IA4DC;SA5DY,gBAAgB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable, Inject } from '@angular/core';\nimport { NB_DOCUMENT } from '../theme.options';\n\n/**\n * Service to control the global page spinner.\n */\n@Injectable()\nexport class NbSpinnerService {\n\n  private loaders: Promise<any>[] = [];\n  private selector: string = 'nb-global-spinner';\n\n  constructor(@Inject(NB_DOCUMENT) private document) {}\n\n  /**\n   * Appends new loader to the list of loader to be completed before\n   * spinner will be hidden\n   * @param method Promise<any>\n   */\n  registerLoader(method: Promise<any>): void {\n    this.loaders.push(method);\n  }\n\n  /**\n   * Clears the list of loader\n   */\n  clear(): void {\n    this.loaders = [];\n  }\n\n  /**\n   * Start the loader process, show spinnder and execute loaders\n   */\n  load(): void {\n    this.showSpinner();\n    this.executeAll();\n  }\n\n  private executeAll(done = () => {}): void {\n    Promise.all(this.loaders).then((values) => {\n      this.hideSpinner();\n      done.call(null, values);\n    })\n      .catch((error) => {\n        // TODO: Promise.reject\n        console.error(error);\n      });\n  }\n\n  // TODO is there any better way of doing this?\n  private showSpinner(): void {\n    const el = this.getSpinnerElement();\n    if (el) {\n      el.style['display'] = 'block';\n    }\n  }\n\n  private hideSpinner(): void {\n    const el = this.getSpinnerElement();\n    if (el) {\n      el.style['display'] = 'none';\n    }\n  }\n\n  private getSpinnerElement() {\n    return this.document.getElementById(this.selector);\n  }\n}\n"]}