{"version":3,"file":"direction.service.js","sourceRoot":"","sources":["../../../../.ng_build/theme/services/direction.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC7E,OAAO,EAAc,aAAa,EAAE,MAAM,MAAM,CAAC;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC;;KAEK;AACL,MAAM,CAAN,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,gCAAW,CAAA;IACX,gCAAW,CAAA;AACb,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,QAG5B;AAAA,CAAC;AAEF;;KAEK;AACL,MAAM,CAAC,IAAM,mBAAmB,GAAG,IAAI,cAAc,CAAoB,kBAAkB,CAAC,CAAC;AAE7F;;;GAGG;AAEH;IAGE,kCACmD,SAAiC;QAAjC,0BAAA,EAAA,YAAY,iBAAiB,CAAC,GAAG;QAAjC,cAAS,GAAT,SAAS,CAAwB;QAH5E,qBAAgB,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;QAK9C,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED;;;SAGK;IACE,wCAAK,GAAZ;QACE,OAAO,IAAI,CAAC,SAAS,KAAK,iBAAiB,CAAC,GAAG,CAAC;IAClD,CAAC;IAED;;;SAGK;IACE,wCAAK,GAAZ;QACE,OAAO,IAAI,CAAC,SAAS,KAAK,iBAAiB,CAAC,GAAG,CAAC;IAClD,CAAC;IAED;;;SAGK;IACL,+CAAY,GAAZ;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,+CAAY,GAAZ,UAAa,SAA4B;QACvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACH,oDAAiB,GAAjB;QACE,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAqB,CAAC,CAAC;IAChE,CAAC;IAhDU,wBAAwB;QADpC,UAAU,EAAE;QAKR,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,mBAAmB,CAAC,CAAA;;OAJ/B,wBAAwB,CAiDpC;IAAD,+BAAC;CAAA,AAjDD,IAiDC;SAjDY,wBAAwB","sourcesContent":["import { InjectionToken, Optional, Inject, Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * Layout direction.\n * */\nexport enum NbLayoutDirection {\n  LTR = 'ltr',\n  RTL = 'rtl',\n};\n\n/**\n * Layout direction setting injection token.\n * */\nexport const NB_LAYOUT_DIRECTION = new InjectionToken<NbLayoutDirection>('Layout direction');\n\n/**\n * Layout Direction Service.\n * Allows to set or get layout direction and listen to its changes\n */\n@Injectable()\nexport class NbLayoutDirectionService {\n  private $directionChange = new ReplaySubject(1);\n\n  constructor(\n    @Optional() @Inject(NB_LAYOUT_DIRECTION) private direction = NbLayoutDirection.LTR,\n  ) {\n    this.setDirection(direction);\n  }\n\n  /**\n   * Returns true if layout direction set to left to right.\n   * @returns boolean.\n   * */\n  public isLtr(): boolean {\n    return this.direction === NbLayoutDirection.LTR;\n  }\n\n  /**\n   * Returns true if layout direction set to right to left.\n   * @returns boolean.\n   * */\n  public isRtl(): boolean {\n    return this.direction === NbLayoutDirection.RTL;\n  }\n\n  /**\n   * Returns current layout direction.\n   * @returns NbLayoutDirection.\n   * */\n  getDirection(): NbLayoutDirection {\n    return this.direction;\n  }\n\n  /**\n   * Sets layout direction\n   * @param {NbLayoutDirection} direction\n   */\n  setDirection(direction: NbLayoutDirection) {\n    this.direction = direction;\n    this.$directionChange.next(direction);\n  }\n\n  /**\n   * Triggered when direction was changed.\n   * @returns Observable<NbLayoutDirection>.\n   */\n  onDirectionChange(): Observable<NbLayoutDirection> {\n    return this.$directionChange.pipe(share<NbLayoutDirection>());\n  }\n}\n"]}