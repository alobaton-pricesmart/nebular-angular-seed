{"version":3,"file":"breakpoints.service.js","sourceRoot":"","sources":["../../../../.ng_build/theme/services/breakpoints.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;;;;AAEH,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAYxD,MAAM,CAAC,IAAM,yBAAyB,GAAG;IACvC;QACE,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,CAAC;KACT;IACD;QACE,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,GAAG;KACX;IACD;QACE,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,GAAG;KACX;IACD;QACE,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,GAAG;KACX;IACD;QACE,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,GAAG;KACX;IACD;QACE,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;KACZ;IACD;QACE,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,IAAI;KACZ;IACD;QACE,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,IAAI;KACZ;CACF,CAAC;AAEF;;;;;GAKG;AAEH;IAIE,mCAAkD,WAAW;QAAX,gBAAW,GAAX,WAAW,CAAA;QAC3D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,CAAoB;YACtE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YACtB,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAED;;;;OAIG;IACH,8CAAU,GAAV,UAAW,KAAa;QACtB,IAAM,OAAO,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QAClD,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAE1C,OAAO,WAAW;aACf,IAAI,CAAC,UAAC,KAAwB,EAAE,KAAa;YAC5C,IAAM,IAAI,GAAG,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACpC,OAAO,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC,CAAC,IAAI,OAAO,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,6CAAS,GAAT,UAAU,IAAY;QACpB,IAAM,OAAO,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;QAChD,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAE1C,OAAO,WAAW,CAAC,IAAI,CAAC,UAAC,KAAwB,IAAK,OAAA,IAAI,KAAK,KAAK,CAAC,IAAI,EAAnB,CAAmB,CAAC,IAAI,OAAO,CAAC;IACxF,CAAC;IAED;;;OAGG;IACH,kDAAc,GAAd;QACE,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,qDAAiB,GAAjB;QACE,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IArDU,yBAAyB;QADrC,UAAU,EAAE;QAKE,WAAA,MAAM,CAAC,oBAAoB,CAAC,CAAA;;OAJ9B,yBAAyB,CAsDrC;IAAD,gCAAC;CAAA,AAtDD,IAsDC;SAtDY,yBAAyB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Inject, Injectable } from '@angular/core';\nimport { NB_MEDIA_BREAKPOINTS } from '../theme.options';\n\n/**\n * Media breakpoint type\n *\n * Where `name` - breakpoint name alias (e.g. xs, sm, md, etc), and width - min breakpoint width\n */\nexport interface NbMediaBreakpoint {\n  name: string;\n  width: number;\n}\n\nexport const DEFAULT_MEDIA_BREAKPOINTS = [\n  {\n    name: 'xs',\n    width: 0,\n  },\n  {\n    name: 'is',\n    width: 400,\n  },\n  {\n    name: 'sm',\n    width: 576,\n  },\n  {\n    name: 'md',\n    width: 768,\n  },\n  {\n    name: 'lg',\n    width: 992,\n  },\n  {\n    name: 'xl',\n    width: 1200,\n  },\n  {\n    name: 'xxl',\n    width: 1400,\n  },\n  {\n    name: 'xxxl',\n    width: 1600,\n  },\n];\n\n/**\n * Manages media breakpoints\n *\n * Provides access to available media breakpoints to convert window width to a configured breakpoint,\n * e.g. 200px - *xs* breakpoint\n */\n@Injectable()\nexport class NbMediaBreakpointsService {\n\n  private breakpointsMap: { [breakpoint: string]: number };\n\n  constructor(@Inject(NB_MEDIA_BREAKPOINTS) private breakpoints) {\n    this.breakpointsMap = this.breakpoints.reduce((res, b: NbMediaBreakpoint) => {\n      res[b.name] = b.width;\n      return res;\n    }, {});\n  }\n\n  /**\n   * Returns a configured breakpoint by width\n   * @param width number\n   * @returns {Z|{name: string, width: number}}\n   */\n  getByWidth(width: number): NbMediaBreakpoint {\n    const unknown = { name: 'unknown', width: width };\n    const breakpoints = this.getBreakpoints();\n\n    return breakpoints\n      .find((point: NbMediaBreakpoint, index: number) => {\n        const next = breakpoints[index + 1];\n        return width >= point.width && (!next || width < next.width);\n      }) || unknown;\n  }\n\n  /**\n   * Returns a configured breakpoint by name\n   * @param name string\n   * @returns NbMediaBreakpoint\n   */\n  getByName(name: string): NbMediaBreakpoint {\n    const unknown = { name: 'unknown', width: NaN };\n    const breakpoints = this.getBreakpoints();\n\n    return breakpoints.find((point: NbMediaBreakpoint) => name === point.name) || unknown;\n  }\n\n  /**\n   * Returns a list of configured breakpoints for the theme\n   * @returns NbMediaBreakpoint[]\n   */\n  getBreakpoints(): NbMediaBreakpoint[] {\n    return this.breakpoints;\n  }\n\n  /**\n   * Returns a map of configured breakpoints for the theme\n   * @returns {[p: string]: number}\n   */\n  getBreakpointsMap(): { [breakpoint: string]: number } {\n    return this.breakpointsMap;\n  }\n}\n"]}