{"version":3,"file":"simple-interceptor.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/interceptors/simple-interceptor.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAG7D,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,0BAA0B,EAAE,MAAM,oBAAoB,CAAC;AAIhE;IAEE,iCAAoB,QAAkB,EACoB,UAAoC;QAApC,2BAAA,EAAA,4BAAoC;QAD1E,aAAQ,GAAR,QAAQ,CAAU;QACoB,eAAU,GAAV,UAAU,CAA0B;IAC9F,CAAC;IAED,2CAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAAlD,iBAeC;QAbC,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;aAC/B,IAAI,CACH,SAAS,CAAC,UAAC,KAAqB;;YAC9B,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE;gBAC7B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;oBACd,UAAU;wBACR,GAAC,KAAI,CAAC,UAAU,IAAG,KAAK,CAAC,QAAQ,EAAE;2BACpC;iBACF,CAAC,CAAC;aACJ;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED,sBAAc,gDAAW;aAAzB;YACE,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC1C,CAAC;;;OAAA;IAzBU,uBAAuB;QADnC,UAAU,EAAE;QAIE,WAAA,MAAM,CAAC,0BAA0B,CAAC,CAAA;yCADjB,QAAQ;OAF3B,uBAAuB,CA0BnC;IAAD,8BAAC;CAAA,AA1BD,IA0BC;SA1BY,uBAAuB","sourcesContent":["import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NbAuthService } from '../auth.service';\nimport { NB_AUTH_INTERCEPTOR_HEADER } from '../../auth.options';\nimport { NbAuthJWTToken } from '../token/token';\n\n@Injectable()\nexport class NbAuthSimpleInterceptor implements HttpInterceptor {\n\n  constructor(private injector: Injector,\n              @Inject(NB_AUTH_INTERCEPTOR_HEADER) protected headerName: string = 'Authorization') {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    return this.authService.getToken()\n      .pipe(\n        switchMap((token: NbAuthJWTToken) => {\n          if (token && token.getValue()) {\n            req = req.clone({\n              setHeaders: {\n                [this.headerName]: token.getValue(),\n              },\n            });\n          }\n          return next.handle(req);\n        }),\n      );\n  }\n\n  protected get authService(): NbAuthService {\n    return this.injector.get(NbAuthService);\n  }\n}\n"]}