{"version":3,"file":"password-strategy-options.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/strategies/password/password-strategy-options.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { NbAuthSimpleToken, NbAuthTokenClass } from '../../services';\nimport { NbAuthStrategyOptions } from '../auth-strategy-options';\nimport { getDeepFromObject } from '../../helpers';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\nexport interface NbPasswordStrategyModule {\n  alwaysFail?: boolean;\n  endpoint?: string;\n  method?: string;\n  redirect?: {\n    success?: string | null;\n    failure?: string | null;\n  };\n  requireValidToken?: boolean;\n  defaultErrors?: string[];\n  defaultMessages?: string[];\n}\n\nexport interface NbPasswordStrategyReset extends NbPasswordStrategyModule {\n  resetPasswordTokenKey?: string;\n}\n\nexport interface NbPasswordStrategyToken {\n  class?: NbAuthTokenClass,\n  key?: string,\n  getter?: Function,\n}\n\nexport interface NbPasswordStrategyMessage {\n  key?: string,\n  getter?: Function,\n}\n\nexport class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n  baseEndpoint? = '/api/auth/';\n  login?: boolean | NbPasswordStrategyModule = {\n    alwaysFail: false,\n    endpoint: 'login',\n    method: 'post',\n    requireValidToken: false,\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n    defaultMessages: ['You have been successfully logged in.'],\n  };\n  register?: boolean | NbPasswordStrategyModule = {\n    alwaysFail: false,\n    endpoint: 'register',\n    method: 'post',\n    requireValidToken: false,\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully registered.'],\n  };\n  requestPass?: boolean | NbPasswordStrategyModule = {\n    endpoint: 'request-pass',\n    method: 'post',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Reset password instructions have been sent to your email.'],\n  };\n  resetPass?: boolean | NbPasswordStrategyReset = {\n    endpoint: 'reset-pass',\n    method: 'put',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    resetPasswordTokenKey: 'reset_password_token',\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your password has been successfully changed.'],\n  };\n  logout?: boolean | NbPasswordStrategyReset = {\n    alwaysFail: false,\n    endpoint: 'logout',\n    method: 'delete',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully logged out.'],\n  };\n  refreshToken?: boolean | NbPasswordStrategyModule = {\n    endpoint: 'refresh-token',\n    method: 'post',\n    requireValidToken: false,\n    redirect: {\n      success: null,\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your token has been successfully refreshed.'],\n  };\n  token?: NbPasswordStrategyToken = {\n    class: NbAuthSimpleToken,\n    key: 'data.token',\n    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.body,\n      options.token.key,\n    ),\n  };\n  errors?: NbPasswordStrategyMessage = {\n    key: 'data.errors',\n    getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.error,\n      options.errors.key,\n      options[module].defaultErrors,\n    ),\n  };\n  messages?: NbPasswordStrategyMessage = {\n    key: 'data.messages',\n    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.body,\n      options.messages.key,\n      options[module].defaultMessages,\n    ),\n  };\n  validation?: {\n    password?: {\n      required?: boolean;\n      minLength?: number | null;\n      maxLength?: number | null;\n      regexp?: string | null;\n    };\n    email?: {\n      required?: boolean;\n      regexp?: string | null;\n    };\n    fullName?: {\n      required?: boolean;\n      minLength?: number | null;\n      maxLength?: number | null;\n      regexp?: string | null;\n    };\n  };\n}\n\nexport const passwordStrategyOptions: NbPasswordAuthStrategyOptions = new NbPasswordAuthStrategyOptions();\n"]}