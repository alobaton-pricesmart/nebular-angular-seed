{"version":3,"file":"dummy-strategy.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/strategies/dummy/dummy-strategy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbDummyAuthStrategyOptions, dummyStrategyOptions } from './dummy-strategy-options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n\n\n/**\n * Dummy auth strategy. Could be useful for auth setup when backend is not available yet.\n *\n *\n * Strategy settings.\n *\n * ```ts\n * export class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {\n *   name = 'dummy';\n *   token = {\n *     class: NbAuthSimpleToken,\n *   };\n *   delay? = 1000;\n *   alwaysFail? = false;\n * }\n * ```\n */\n@Injectable()\nexport class NbDummyAuthStrategy extends NbAuthStrategy {\n\n  protected defaultOptions: NbDummyAuthStrategyOptions = dummyStrategyOptions;\n\n  static setup(options: NbDummyAuthStrategyOptions): [NbAuthStrategyClass, NbDummyAuthStrategyOptions] {\n    return [NbDummyAuthStrategy, options];\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  resetPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  logout(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  refreshToken(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  protected createDummyResult(data?: any): NbAuthResult {\n\n    if (this.getOption('alwaysFail')) {\n      return new NbAuthResult(\n        false,\n        this.createFailResponse(data),\n        null,\n        ['Something went wrong.'],\n      );\n    }\n\n    try {\n      const token = this.createToken('test token', true);\n      return new NbAuthResult(\n        true,\n        this.createSuccessResponse(data),\n        '/',\n        [],\n        ['Successfully logged in.'],\n        token,\n      );\n    } catch (err) {\n      return new NbAuthResult(\n        false,\n        this.createFailResponse(data),\n        null,\n        [err.message],\n      );\n    }\n\n\n  }\n}\n"]}